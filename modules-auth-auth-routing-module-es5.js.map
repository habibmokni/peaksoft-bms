{"version":3,"sources":["webpack:///src/modules/auth/containers/forgot-password-social/forgot-password-social.component.html","webpack:///src/modules/auth/containers/forgot-password/forgot-password.component.html","webpack:///src/modules/auth/containers/login-social/login-social.component.html","webpack:///src/modules/auth/containers/login/login.component.html","webpack:///src/modules/auth/containers/multi-tenant-add-users/multi-tenant-add-users.component.html","webpack:///src/modules/auth/containers/multi-tenant-select/multi-tenant-select.component.html","webpack:///src/modules/auth/containers/org-create/org-create.component.html","webpack:///src/modules/auth/containers/org-join/org-join.component.html","webpack:///src/modules/auth/containers/register-social/register-social.component.html","webpack:///src/modules/auth/containers/register/register.component.html","webpack:///src/modules/auth/auth-routing.module.ts","webpack:///src/modules/auth/auth.module.ts","webpack:///src/modules/auth/components/index.ts","webpack:///src/modules/auth/containers/forgot-password-social/forgot-password-social.component.scss","webpack:///src/modules/auth/containers/forgot-password-social/forgot-password-social.component.ts","webpack:///src/modules/auth/containers/forgot-password/forgot-password.component.scss","webpack:///src/modules/auth/containers/forgot-password/forgot-password.component.ts","webpack:///src/modules/auth/containers/index.ts","webpack:///src/modules/auth/containers/login-social/login-social.component.scss","webpack:///src/modules/auth/containers/login-social/login-social.component.ts","webpack:///src/modules/auth/containers/login/login.component.scss","webpack:///src/modules/auth/containers/login/login.component.ts","webpack:///src/modules/auth/containers/multi-tenant-add-users/multi-tenant-add-users.component.scss","webpack:///src/modules/auth/containers/multi-tenant-add-users/multi-tenant-add-users.component.ts","webpack:///src/modules/auth/containers/multi-tenant-select/multi-tenant-select.component.scss","webpack:///src/modules/auth/containers/multi-tenant-select/multi-tenant-select.component.ts","webpack:///src/modules/auth/containers/org-create/org-create.component.scss","webpack:///src/modules/auth/containers/org-create/org-create.component.ts","webpack:///src/modules/auth/containers/org-join/org-join.component.scss","webpack:///src/modules/auth/containers/org-join/org-join.component.ts","webpack:///src/modules/auth/containers/register-social/register-social.component.scss","webpack:///src/modules/auth/containers/register-social/register-social.component.ts","webpack:///src/modules/auth/containers/register/register.component.scss","webpack:///src/modules/auth/containers/register/register.component.ts","webpack:///src/modules/auth/guards/auth.guard.ts","webpack:///src/modules/auth/guards/index.ts","webpack:///src/modules/auth/services/auth-interceptor.service.ts"],"names":["ROUTES","path","pathMatch","redirectTo","canActivate","component","data","title","AuthRoutingModule","imports","forChild","exports","AuthModule","providers","provide","useClass","multi","declarations","components","ForgotPasswordSocialComponent","fb","modalService","router","forgotPasswordForm","group","email","required","status","open","confirmationModal","result","then","navigate","reason","key","controls","control","markAllAsTouched","get","emailControl","touched","emailControlInvalid","hasError","selector","changeDetection","OnPush","template","ForgotPasswordComponent","containers","LoginSocialComponent","loginForm","password","minLength","checkbox","passwordControl","passwordControlInvalid","LoginComponent","authService","error","token","value","authObs","login","alert","console","log","subscribe","resData","isLogged","next","isLogged2","localStorage","setItem","idToken","errorMessage","errorModal","MultiTenantAddUsersComponent","addUsersForm","emails","array","push","index","MultiTenantSelectComponent","OrgCreateComponent","organizationNewForm","name","nameControl","nameControlInvalid","OrgJoinComponent","organizationJoinFormCode","code","organizationJoinFormRequest","reset","confirmationModalAccessCode","_reset","confirmationModalRequest","codeControl","codeControlInvalid","RegisterSocialComponent","registerForm","firstName","lastName","confirmPassword","termsAndConditions","requiredTrue","validator","_checkPasswords","pass","confirmPass","passwordMismatch","firstNameControl","firstNameControlInvalid","lastNameControl","lastNameControlInvalid","confirmPasswordControl","confirmPasswordControlInvalid","termsAndConditionsControl","termsAndConditionsControlInvalid","RegisterComponent","autoLogin","signup","AuthGuard","guards","AuthInterceptorService","req","user","pipe","handle","userReq","clone","params","set"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAf;;AAKA;;AAGA;;AAMA;;;AACO,QAAMA,MAAM,GAAW,CAC1B;AACIC,UAAI,EAAE,EADV;AAEIC,eAAS,EAAE,MAFf;AAGIC,gBAAU,EAAE;AAHhB,KAD0B,EAM1B;AACIF,UAAI,EAAE,OADV;AAEIG,iBAAW,EAAE,EAFjB;AAGIC,eAAS,EAAE,0DAHf;AAIIC,UAAI,EAAE;AACFC,aAAK,EAAE;AADL;AAJV,KAN0B,EAc1B;AACIN,UAAI,EAAE,UADV;AAEIG,iBAAW,EAAE,EAFjB;AAGIC,eAAS,EAAE,6DAHf;AAIIC,UAAI,EAAE;AACFC,aAAK,EAAE;AADL;AAJV,KAd0B,EAsB1B;AACIN,UAAI,EAAE,iBADV;AAEIG,iBAAW,EAAE,EAFjB;AAGIC,eAAS,EAAE,mEAHf;AAIIC,UAAI,EAAE;AACFC,aAAK,EAAE;AADL;AAJV,KAtB0B,EA8B1B;AACIN,UAAI,EAAE,cADV;AAEIG,iBAAW,EAAE,EAFjB;AAGIC,eAAS,EAAE,gEAHf;AAIIC,UAAI,EAAE;AACFC,aAAK,EAAE;AADL;AAJV,KA9B0B,EAsC1B;AACIN,UAAI,EAAE,iBADV;AAEIG,iBAAW,EAAE,EAFjB;AAGIC,eAAS,EAAE,mEAHf;AAIIC,UAAI,EAAE;AACFC,aAAK,EAAE;AADL;AAJV,KAtC0B,EA8C1B;AACIN,UAAI,EAAE,wBADV;AAEIG,iBAAW,EAAE,EAFjB;AAGIC,eAAS,EAAE,yEAHf;AAIIC,UAAI,EAAE;AACFC,aAAK,EAAE;AADL;AAJV,KA9C0B,EAsD1B;AACIN,UAAI,EAAE,qBADV;AAEIG,iBAAW,EAAE,EAFjB;AAGIC,eAAS,EAAE,sEAHf;AAIIC,UAAI,EAAE;AACFC,aAAK,EAAE;AADL;AAJV,KAtD0B,EA8D1B;AACIN,UAAI,EAAE,wBADV;AAEIG,iBAAW,EAAE,EAFjB;AAGIC,eAAS,EAAE,wEAHf;AAIIC,UAAI,EAAE;AACFC,aAAK,EAAE;AADL;AAJV,KA9D0B,EAsE1B;AACIN,UAAI,EAAE,YADV;AAEIG,iBAAW,EAAE,EAFjB;AAGIC,eAAS,EAAE,8DAHf;AAIIC,UAAI,EAAE;AACFC,aAAK,EAAE;AADL;AAJV,KAtE0B,EA8E1B;AACIN,UAAI,EAAE,UADV;AAEIG,iBAAW,EAAE,EAFjB;AAGIC,eAAS,EAAE,4DAHf;AAIIC,UAAI,EAAE;AACFC,aAAK,EAAE;AADL;AAJV,KA9E0B,CAAvB;;AA4FP,QAAaC,iBAAiB;AAAA;AAAA,KAA9B;;AAAaA,qBAAiB,6DAJ7B,+DAAS;AACNC,aAAO,EAAE,CAAC,uDAAD,EAAa,6DAAaC,QAAb,CAAsBV,MAAtB,CAAb,CADH;AAENW,aAAO,EAAE,CAAC,4DAAD;AAFH,KAAT,CAI6B,GAAjBH,iBAAiB,CAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3Gb;;AAOA;;AAIA;;AAGA;;AAGA;;AAGA;;;AA0BA,QAAaI,UAAU;AAAA;AAAA,KAAvB;;AAAaA,cAAU,6DAtBtB,+DAAS;AACNH,aAAO,EAAE,CACL,4DADK,EAEL,4DAFK,EAGL,kEAHK,EAIL,0DAJK,EAKL,qEALK,EAML,yEANK,EAOL,sFAPK,CADH;AAUNI,eAAS,+BACF,mDADE,sBAEF,+CAFE,IAGL;AACIC,eAAO,EAAE,sEADb;AAEIC,gBAAQ,EAAE,0FAFd;AAGIC,aAAK,EAAE;AAHX,OAHK,EAVH;AAmBNC,kBAAY,+BAAM,sDAAN,sBAAoC,sDAApC,EAnBN;AAoBNN,aAAO,+BAAM,sDAAN,sBAAoC,sDAApC;AApBD,KAAT,CAsBsB,GAAVC,UAAU,CAAV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CN,QAAMM,UAAU,GAAQ,EAAxB;;;;;;;;;;;;;;;;ACAP;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWf,QAAaC,6BAA6B;AAAA;AAAA;AAOtC,6CAAoBC,EAApB,EAA6CC,YAA7C,EAA6EC,MAA7E,EAA6F;AAAA;;AAAzE,aAAAF,EAAA,GAAAA,EAAA;AAAyB,aAAAC,YAAA,GAAAA,YAAA;AAAgC,aAAAC,MAAA,GAAAA,MAAA;AAJ7E,aAAAC,kBAAA,GAAqB,KAAKH,EAAL,CAAQI,KAAR,CAAc;AAC/BC,eAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWD,KAAjC,CAAL;AADwB,SAAd,CAArB;AAI+F;;AAPzD;AAAA;AAAA,mCAQ3B,CAAE;AARyB;AAAA;AAAA,mCAU3B;AAAA;;AACP,cAAI,KAAKF,kBAAL,CAAwBI,MAAxB,KAAmC,OAAvC,EAAgD;AAC5C,iBAAKN,YAAL,CAAkBO,IAAlB,CAAuB,KAAKC,iBAA5B,EAA+CC,MAA/C,CAAsDC,IAAtD,CACI,UAAAD,MAAM,EAAI;AACN,kBAAIA,MAAM,KAAK,WAAf,EAA4B;AACxB,qBAAI,CAACR,MAAL,CAAYU,QAAZ,CAAqB,CAAC,YAAD,CAArB;AACH;AACJ,aALL,EAMI,UAAAC,MAAM,EAAI,CAAE,CANhB;AAQH;;AAED,eAAK,IAAMC,GAAX,IAAkB,KAAKX,kBAAL,CAAwBY,QAA1C,EAAoD;AAChD,gBAAMC,OAAO,GAAG,KAAKb,kBAAL,CAAwBY,QAAxB,CAAiCD,GAAjC,CAAhB;AACAE,mBAAO,CAACC,gBAAR;AACH;AACJ;AAED;;AA5BsC;AAAA;AAAA,4BA8BnB;AACf,iBAAO,KAAKd,kBAAL,CAAwBe,GAAxB,CAA4B,OAA5B,CAAP;AACH;AAhCqC;AAAA;AAAA,4BAkCd;AACpB,iBAAO,KAAKC,YAAL,CAAkBC,OAAlB,IAA6B,CAAC,KAAKC,mBAA1C;AACH;AApCqC;AAAA;AAAA,4BAsCZ;AACtB,iBACI,KAAKF,YAAL,CAAkBC,OAAlB,KACC,KAAKD,YAAL,CAAkBG,QAAlB,CAA2B,UAA3B,KAA0C,KAAKH,YAAL,CAAkBG,QAAlB,CAA2B,OAA3B,CAD3C,CADJ;AAIH;AA3CqC;;AAAA;AAAA,OAA1C;;;;cAO4B;;cAAmC;;cAA0B;;;;AANrD,8DAA/B,gEAAU,mBAAV,CAA+B,E,wEAAoB,yD,CAApB,G,uCAAA,E,mBAAA,E,MAAA;AADvBvB,iCAA6B,6DANzC,gEAAU;AACPwB,cAAQ,EAAE,8BADH;AAEPC,qBAAe,EAAE,sEAAwBC,MAFlC;AAGPC,cAAQ,EAAR;AAAA;AAAA,qJAHO;;;;AAAA,KAAV,CAMyC,E,+EAOd,0D,EAAmC,mE,EAA0B,sD,EAP/C,GAA7B3B,6BAA6B,CAA7B;;;;;;;;;;;;;;;;ACXb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWf,QAAa4B,uBAAuB;AAAA;AAAA;AAOhC,uCAAoB3B,EAApB,EAA6CC,YAA7C,EAA6EC,MAA7E,EAA6F;AAAA;;AAAzE,aAAAF,EAAA,GAAAA,EAAA;AAAyB,aAAAC,YAAA,GAAAA,YAAA;AAAgC,aAAAC,MAAA,GAAAA,MAAA;AAJ7E,aAAAC,kBAAA,GAAqB,KAAKH,EAAL,CAAQI,KAAR,CAAc;AAC/BC,eAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWD,KAAjC,CAAL;AADwB,SAAd,CAArB;AAI+F;;AAP/D;AAAA;AAAA,mCAQrB,CAAE;AARmB;AAAA;AAAA,mCAUrB;AAAA;;AACP,cAAI,KAAKF,kBAAL,CAAwBI,MAAxB,KAAmC,OAAvC,EAAgD;AAC5C,iBAAKN,YAAL,CAAkBO,IAAlB,CAAuB,KAAKC,iBAA5B,EAA+CC,MAA/C,CAAsDC,IAAtD,CACI,UAAAD,MAAM,EAAI;AACN,kBAAIA,MAAM,KAAK,WAAf,EAA4B;AACxB,sBAAI,CAACR,MAAL,CAAYU,QAAZ,CAAqB,CAAC,YAAD,CAArB;AACH;AACJ,aALL,EAMI,UAAAC,MAAM,EAAI,CAAE,CANhB;AAQH;;AAED,eAAK,IAAMC,GAAX,IAAkB,KAAKX,kBAAL,CAAwBY,QAA1C,EAAoD;AAChD,gBAAMC,OAAO,GAAG,KAAKb,kBAAL,CAAwBY,QAAxB,CAAiCD,GAAjC,CAAhB;AACAE,mBAAO,CAACC,gBAAR;AACH;AACJ;AAED;;AA5BgC;AAAA;AAAA,4BA8Bb;AACf,iBAAO,KAAKd,kBAAL,CAAwBe,GAAxB,CAA4B,OAA5B,CAAP;AACH;AAhC+B;AAAA;AAAA,4BAkCR;AACpB,iBAAO,KAAKC,YAAL,CAAkBC,OAAlB,IAA6B,CAAC,KAAKC,mBAA1C;AACH;AApC+B;AAAA;AAAA,4BAsCN;AACtB,iBACI,KAAKF,YAAL,CAAkBC,OAAlB,KACC,KAAKD,YAAL,CAAkBG,QAAlB,CAA2B,UAA3B,KAA0C,KAAKH,YAAL,CAAkBG,QAAlB,CAA2B,OAA3B,CAD3C,CADJ;AAIH;AA3C+B;;AAAA;AAAA,OAApC;;;;cAO4B;;cAAmC;;cAA0B;;;;AANrD,8DAA/B,gEAAU,mBAAV,CAA+B,E,wEAAoB,yD,CAApB,G,iCAAA,E,mBAAA,E,MAAA;AADvBK,2BAAuB,6DANnC,gEAAU;AACPJ,cAAQ,EAAE,oBADH;AAEPC,qBAAe,EAAE,sEAAwBC,MAFlC;AAGPC,cAAQ,EAAR;AAAA;AAAA,uIAHO;;;;AAAA,KAAV,CAMmC,E,+EAOR,0D,EAAmC,mE,EAA0B,sD,EAPrD,GAAvBC,uBAAuB,CAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAN,QAAMC,UAAU,GAAG,CACtB,qEADsB,EAEtB,+EAFsB,EAGtB,kGAHsB,EAItB,yFAJsB,EAKtB,kGALsB,EAMtB,sHANsB,EAOtB,6GAPsB,EAQtB,mFARsB,EAStB,6EATsB,EAUtB,qHAVsB,CAAnB;;;;;;;;;;;;;;;;ACXP;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWf,QAAaC,oBAAoB;AAAA;AAAA;AAS7B,oCAAoB7B,EAApB,EAA6CC,YAA7C,EAA6EC,MAA7E,EAA6F;AAAA;;AAAzE,aAAAF,EAAA,GAAAA,EAAA;AAAyB,aAAAC,YAAA,GAAAA,YAAA;AAAgC,aAAAC,MAAA,GAAAA,MAAA;AAN7E,aAAA4B,SAAA,GAAY,KAAK9B,EAAL,CAAQI,KAAR,CAAc;AACtBC,eAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWD,KAAjC,CAAL,CADe;AAEtB0B,kBAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWzB,QAAZ,EAAsB,0DAAW0B,SAAX,CAAqB,CAArB,CAAtB,CAAL,CAFY;AAGtBC,kBAAQ,EAAE,CAAC,KAAD;AAHY,SAAd,CAAZ;AAM+F;;AATlE;AAAA;AAAA,mCAUlB,CAAE;AAVgB;AAAA;AAAA,mCAYlB;AAAA;;AACP,cAAI,KAAKH,SAAL,CAAevB,MAAf,KAA0B,OAA9B,EAAuC;AACnC,iBAAKN,YAAL,CAAkBO,IAAlB,CAAuB,KAAKC,iBAA5B,EAA+CC,MAA/C,CAAsDC,IAAtD,CACI,UAAAD,MAAM,EAAI;AACN,kBAAIA,MAAM,KAAK,WAAf,EAA4B;AACxB,sBAAI,CAACR,MAAL,CAAYU,QAAZ,CAAqB,CAAC,YAAD,CAArB;AACH;AACJ,aALL,EAMI,UAAAC,MAAM,EAAI,CAAE,CANhB;AAQH;;AAED,eAAK,IAAMC,GAAX,IAAkB,KAAKgB,SAAL,CAAef,QAAjC,EAA2C;AACvC,gBAAMC,OAAO,GAAG,KAAKc,SAAL,CAAef,QAAf,CAAwBD,GAAxB,CAAhB;AACAE,mBAAO,CAACC,gBAAR;AACH;AACJ;AAED;;AA9B6B;AAAA;AAAA,4BAgCV;AACf,iBAAO,KAAKa,SAAL,CAAeZ,GAAf,CAAmB,OAAnB,CAAP;AACH;AAlC4B;AAAA;AAAA,4BAoCL;AACpB,iBAAO,KAAKC,YAAL,CAAkBC,OAAlB,IAA6B,CAAC,KAAKC,mBAA1C;AACH;AAtC4B;AAAA;AAAA,4BAwCH;AACtB,iBACI,KAAKF,YAAL,CAAkBC,OAAlB,KACC,KAAKD,YAAL,CAAkBG,QAAlB,CAA2B,UAA3B,KAA0C,KAAKH,YAAL,CAAkBG,QAAlB,CAA2B,OAA3B,CAD3C,CADJ;AAIH;AA7C4B;AAAA;AAAA,4BA+CP;AAClB,iBAAO,KAAKQ,SAAL,CAAeZ,GAAf,CAAmB,UAAnB,CAAP;AACH;AAjD4B;AAAA;AAAA,4BAmDF;AACvB,iBAAO,KAAKgB,eAAL,CAAqBd,OAArB,IAAgC,CAAC,KAAKe,sBAA7C;AACH;AArD4B;AAAA;AAAA,4BAuDA;AACzB,iBACI,KAAKD,eAAL,CAAqBd,OAArB,KACC,KAAKc,eAAL,CAAqBZ,QAArB,CAA8B,UAA9B,KACG,KAAKY,eAAL,CAAqBZ,QAArB,CAA8B,WAA9B,CAFJ,CADJ;AAKH;AA7D4B;;AAAA;AAAA,OAAjC;;;;cAS4B;;cAAmC;;cAA0B;;;;AARrD,8DAA/B,gEAAU,mBAAV,CAA+B,E,wEAAoB,yD,CAApB,G,8BAAA,E,mBAAA,E,MAAA;AADvBO,wBAAoB,6DANhC,gEAAU;AACPN,cAAQ,EAAE,oBADH;AAEPC,qBAAe,EAAE,sEAAwBC,MAFlC;AAGPC,cAAQ,EAAR;AAAA;AAAA,iIAHO;;;;AAAA,KAAV,CAMgC,E,+EASL,0D,EAAmC,mE,EAA0B,sD,EATxD,GAApBG,oBAAoB,CAApB;;;;;;;;;;;;;;;;ACXb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACaf,QAAaO,cAAc;AAAA;AAAA;AAIvB,8BACYpC,EADZ,EAEYC,YAFZ,EAGYC,MAHZ,EAIYmC,WAJZ,EAIoC;AAAA;;AAHxB,aAAArC,EAAA,GAAAA,EAAA;AACA,aAAAC,YAAA,GAAAA,YAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AACA,aAAAmC,WAAA,GAAAA,WAAA;AAPZ,aAAAC,KAAA,GAAQ,EAAR;AACA,aAAAC,KAAA,GAAQ,EAAR;AA6CA,aAAAT,SAAA,GAAY,KAAK9B,EAAL,CAAQI,KAAR,CAAc;AACtBC,eAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWD,KAAjC,CAAL,CADe;AAEtB0B,kBAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWzB,QAAZ,EAAsB,0DAAW0B,SAAX,CAAqB,CAArB,CAAtB,CAAL,CAFY;AAGtBC,kBAAQ,EAAE,CAAC,KAAD;AAHY,SAAd,CAAZ;AAtCI;AAEJ;;;AAXuB;AAAA;AAqDvB;AACA;AACA;AAvDuB,mCAwDZ,CAAE;AAxDU;AAAA;AAAA,mCA0DZ;AAAA;;AACP,cAAM5B,KAAK,GAAG,KAAKyB,SAAL,CAAeU,KAAf,CAAqBnC,KAAnC;AACA,cAAM0B,QAAQ,GAAG,KAAKD,SAAL,CAAeU,KAAf,CAAqBT,QAAtC;AACA,cAAIU,OAAJ;;AAEA,cAAI,KAAKX,SAAL,CAAevB,MAAf,KAA0B,OAA9B,EAAuC;AACnC;AACAkC,mBAAO,GAAG,KAAKJ,WAAL,CAAiBK,KAAjB,CAAuBrC,KAAvB,EAA8B0B,QAA9B,CAAV;AACH,WAHD,MAGO;AACHY,iBAAK,CAAC,oBAAD,CAAL;AACAC,mBAAO,CAACC,GAAR,CAAYxC,KAAZ,EAAmB0B,QAAnB;AACH;;AACDU,iBAAO,CAACK,SAAR,CACI,UAAAC,OAAO,EAAI;AACPH,mBAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBE,OAAzB;;AACA,kBAAI,CAACV,WAAL,CAAiBW,QAAjB,CAA0BC,IAA1B,CAA+B,IAA/B;;AACA,kBAAI,CAACZ,WAAL,CAAiBa,SAAjB,GAA6B,IAA7B;AACAN,mBAAO,CAACC,GAAR,CAAY,MAAI,CAACR,WAAL,CAAiBa,SAA7B;AACAC,wBAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCL,OAAO,CAACM,OAA7C;;AACA,kBAAI,CAACnD,MAAL,CAAYU,QAAZ,CAAqB,CAAC,eAAD,CAArB,EANO,CAOP;;AACH,WATL,EAUI,UAAA0C,YAAY,EAAI;AACZ,kBAAI,CAACjB,WAAL,CAAiBW,QAAjB,CAA0BC,IAA1B,CAA+B,KAA/B;;AACAL,mBAAO,CAACC,GAAR,CAAYS,YAAZ;AACA,kBAAI,CAAChB,KAAL,GAAagB,YAAb;;AACA,kBAAI,CAACrD,YAAL,CAAkBO,IAAlB,CAAuB,MAAI,CAAC+C,UAA5B,EAAwC7C,MAAxC,CAA+CC,IAA/C,CACI,UAAAD,MAAM,EAAI;AACN,kBAAIA,MAAM,KAAK,OAAf,EAAwB;AACpB,sBAAI,CAACR,MAAL,CAAYU,QAAZ,CAAqB,CAAC,aAAD,CAArB;AACH;AACJ,aALL,EAMI,UAAAC,MAAM,EAAI,CAAE,CANhB;AAQH,WAtBL;;AAwBA,eAAK,IAAMC,GAAX,IAAkB,KAAKgB,SAAL,CAAef,QAAjC,EAA2C;AACvC,gBAAMC,OAAO,GAAG,KAAKc,SAAL,CAAef,QAAf,CAAwBD,GAAxB,CAAhB;AACAE,mBAAO,CAACC,gBAAR;AACH;AACJ;AAlGsB;AAAA;AAAA,4BAaJ;AACf,iBAAO,KAAKa,SAAL,CAAeZ,GAAf,CAAmB,OAAnB,CAAP;AACH;AAfsB;AAAA;AAAA,4BAiBC;AACpB,iBAAO,KAAKC,YAAL,CAAkBC,OAAlB,IAA6B,CAAC,KAAKC,mBAA1C;AACH;AAnBsB;AAAA;AAAA,4BAqBG;AACtB,iBACI,KAAKF,YAAL,CAAkBC,OAAlB,KACC,KAAKD,YAAL,CAAkBG,QAAlB,CAA2B,UAA3B,KAA0C,KAAKH,YAAL,CAAkBG,QAAlB,CAA2B,OAA3B,CAD3C,CADJ;AAIH;AA1BsB;AAAA;AAAA,4BA4BD;AAClB,iBAAO,KAAKQ,SAAL,CAAeZ,GAAf,CAAmB,UAAnB,CAAP;AACH;AA9BsB;AAAA;AAAA,4BAgCI;AACvB,iBAAO,KAAKgB,eAAL,CAAqBd,OAArB,IAAgC,CAAC,KAAKe,sBAA7C;AACH;AAlCsB;AAAA;AAAA,4BAoCM;AACzB,iBACI,KAAKD,eAAL,CAAqBd,OAArB,KACC,KAAKc,eAAL,CAAqBZ,QAArB,CAA8B,UAA9B,KACG,KAAKY,eAAL,CAAqBZ,QAArB,CAA8B,WAA9B,CAFJ,CADJ;AAKH;AA1CsB;;AAAA;AAAA,OAA3B;;;;cAKoB;;cACU;;cACN;;cACK;;;;AAqCO,8DAA/B,gEAAU,mBAAV,CAA+B,E,wEAAoB,yD,CAApB,G,wBAAA,E,mBAAA,E,MAAA;AACP,8DAAxB,gEAAU,YAAV,CAAwB,E,wEAAa,yD,CAAb,G,wBAAA,E,YAAA,E,MAAA;AA9ChBc,kBAAc,6DAN1B,gEAAU;AACPb,cAAQ,EAAE,UADH;AAEPC,qBAAe,EAAE,sEAAwBC,MAFlC;AAGPC,cAAQ,EAAR;AAAA;AAAA,mHAHO;;;;AAAA,KAAV,CAM0B,E,+EAKP,0D,EACU,mE,EACN,sD,EACK,kE,EARF,GAAdU,cAAc,CAAd;;;;;;;;;;;;;;;;ACbb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWf,QAAaoB,4BAA4B;AAAA;AAAA;AAOrC,4CAAoBxD,EAApB,EAA6CC,YAA7C,EAA6EC,MAA7E,EAA6F;AAAA;;AAAzE,aAAAF,EAAA,GAAAA,EAAA;AAAyB,aAAAC,YAAA,GAAAA,YAAA;AAAgC,aAAAC,MAAA,GAAAA,MAAA;AAJ7E,aAAAuD,YAAA,GAAe,KAAKzD,EAAL,CAAQI,KAAR,CAAc;AACzBsD,gBAAM,EAAE,KAAK1D,EAAL,CAAQ2D,KAAR,CAAc,CAAC,KAAK3D,EAAL,CAAQgB,OAAR,CAAgB,EAAhB,EAAoB,CAAC,0DAAWV,QAAZ,EAAsB,0DAAWD,KAAjC,CAApB,CAAD,CAAd;AADiB,SAAd,CAAf;AAI+F;;AAP1D;AAAA;AAAA,mCAQ1B,CAAE;AARwB;AAAA;AAAA,mCAU1B;AAAA;;AACP,cAAI,KAAKoD,YAAL,CAAkBlD,MAAlB,KAA6B,OAAjC,EAA0C;AACtC,iBAAKN,YAAL,CAAkBO,IAAlB,CAAuB,KAAKC,iBAA5B,EAA+CC,MAA/C,CAAsDC,IAAtD,CACI,UAAAD,MAAM,EAAI;AACN,kBAAIA,MAAM,KAAK,WAAf,EAA4B;AACxB,sBAAI,CAACR,MAAL,CAAYU,QAAZ,CAAqB,CAAC,YAAD,CAArB;AACH;AACJ,aALL,EAMI,UAAAC,MAAM,EAAI,CAAE,CANhB;AAQH;;AAED,eAAK,IAAMC,GAAX,IAAkB,KAAK2C,YAAL,CAAkB1C,QAApC,EAA8C;AAC1C,gBAAMC,OAAO,GAAG,KAAKyC,YAAL,CAAkB1C,QAAlB,CAA2BD,GAA3B,CAAhB;AACAE,mBAAO,CAACC,gBAAR;AACH;AACJ;AA1BoC;AAAA;AAAA,qCA4BxB;AACT,eAAKyC,MAAL,CAAYE,IAAZ,CAAiB,KAAK5D,EAAL,CAAQgB,OAAR,CAAgB,EAAhB,EAAoB,CAAC,0DAAWV,QAAZ,EAAsB,0DAAWD,KAAjC,CAApB,CAAjB;AACH;AAED;;AAhCqC;AAAA;AAAA,0CAsCnBwD,KAtCmB,EAsCN;AAC3B,iBAAO,KAAKH,MAAL,CAAY3C,QAAZ,CAAqB8C,KAArB,EAA4BzC,OAA5B,IAAuC,CAAC,KAAKC,mBAAL,CAAyBwC,KAAzB,CAA/C;AACH;AAxCoC;AAAA;AAAA,4CAyCjBA,KAzCiB,EAyCF;AAC/B,iBACI,KAAKH,MAAL,CAAY3C,QAAZ,CAAqB8C,KAArB,EAA4BzC,OAA5B,KACC,KAAKsC,MAAL,CAAY3C,QAAZ,CAAqB8C,KAArB,EAA4BvC,QAA5B,CAAqC,UAArC,KACG,KAAKoC,MAAL,CAAY3C,QAAZ,CAAqB8C,KAArB,EAA4BvC,QAA5B,CAAqC,OAArC,CAFJ,CADJ;AAKH;AA/CoC;AAAA;AAAA,4BAkCxB;AACT,iBAAO,KAAKmC,YAAL,CAAkBvC,GAAlB,CAAsB,QAAtB,CAAP;AACH;AApCoC;;AAAA;AAAA,OAAzC;;;;cAO4B;;cAAmC;;cAA0B;;;;AANrD,8DAA/B,gEAAU,mBAAV,CAA+B,E,wEAAoB,yD,CAApB,G,sCAAA,E,mBAAA,E,MAAA;AADvBsC,gCAA4B,6DANxC,gEAAU;AACPjC,cAAQ,EAAE,8BADH;AAEPC,qBAAe,EAAE,sEAAwBC,MAFlC;AAGPC,cAAQ,EAAR;AAAA;AAAA,qJAHO;;;;AAAA,KAAV,CAMwC,E,+EAOb,0D,EAAmC,mE,EAA0B,sD,EAPhD,GAA5B8B,4BAA4B,CAA5B;;;;;;;;;;;;;;;;ACXb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQf,QAAaM,0BAA0B;AAAA;AAAA;AACnC,4CAAc;AAAA;AAAE;;AADmB;AAAA;AAAA,mCAExB,CAAE;AAFsB;;AAAA;AAAA,OAAvC;;AAAaA,8BAA0B,6DANtC,gEAAU;AACPvC,cAAQ,EAAE,2BADH;AAEPC,qBAAe,EAAE,sEAAwBC,MAFlC;AAGPC,cAAQ,EAAR;AAAA;AAAA,+IAHO;;;;AAAA,KAAV,CAMsC,E,iFAAA,GAA1BoC,0BAA0B,CAA1B;;;;;;;;;;;;;;;;ACRb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACUf,QAAaC,kBAAkB;AAAA;AAAA;AAK3B,kCAAoB/D,EAApB,EAA6CE,MAA7C,EAA6D;AAAA;;AAAzC,aAAAF,EAAA,GAAAA,EAAA;AAAyB,aAAAE,MAAA,GAAAA,MAAA;AAJ7C,aAAA8D,mBAAA,GAAsB,KAAKhE,EAAL,CAAQI,KAAR,CAAc;AAChC6D,cAAI,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAW3D,QAAZ,CAAL;AAD0B,SAAd,CAAtB;AAI+D;;AALpC;AAAA;AAAA,mCAMhB,CAAE;AANc;AAAA;AAAA,mCAQhB;AACP,cAAI,KAAK0D,mBAAL,CAAyBzD,MAAzB,KAAoC,OAAxC,EAAiD;AAC7C,iBAAKL,MAAL,CAAYU,QAAZ,CAAqB,CAAC,8BAAD,CAArB;AACH;;AAED,eAAK,IAAME,GAAX,IAAkB,KAAKkD,mBAAL,CAAyBjD,QAA3C,EAAqD;AACjD,gBAAMC,OAAO,GAAG,KAAKgD,mBAAL,CAAyBjD,QAAzB,CAAkCD,GAAlC,CAAhB;AACAE,mBAAO,CAACC,gBAAR;AACH;AACJ;AAED;;AAnB2B;AAAA;AAAA,4BAqBT;AACd,iBAAO,KAAK+C,mBAAL,CAAyB9C,GAAzB,CAA6B,MAA7B,CAAP;AACH;AAvB0B;AAAA;AAAA,4BAyBJ;AACnB,iBAAO,KAAKgD,WAAL,CAAiB9C,OAAjB,IAA4B,CAAC,KAAK+C,kBAAzC;AACH;AA3B0B;AAAA;AAAA,4BA6BF;AACrB,iBAAO,KAAKD,WAAL,CAAiB9C,OAAjB,IAA4B,KAAK8C,WAAL,CAAiB5C,QAAjB,CAA0B,UAA1B,CAAnC;AACH;AA/B0B;;AAAA;AAAA,OAA/B;;;;cAK4B;;cAA6B;;;;AAL5CyC,sBAAkB,6DAN9B,gEAAU;AACPxC,cAAQ,EAAE,kBADH;AAEPC,qBAAe,EAAE,sEAAwBC,MAFlC;AAGPC,cAAQ,EAAR;AAAA;AAAA,6HAHO;;;;AAAA,KAAV,CAM8B,E,+EAKH,0D,EAA6B,sD,EAL1B,GAAlBqC,kBAAkB,CAAlB;;;;;;;;;;;;;;;;ACVb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWf,QAAaK,gBAAgB;AAAA;AAAA;AAazB,gCAAoBpE,EAApB,EAA6CC,YAA7C,EAA6EC,MAA7E,EAA6F;AAAA;;AAAzE,aAAAF,EAAA,GAAAA,EAAA;AAAyB,aAAAC,YAAA,GAAAA,YAAA;AAAgC,aAAAC,MAAA,GAAAA,MAAA;AAP7E,aAAAmE,wBAAA,GAA2B,KAAKrE,EAAL,CAAQI,KAAR,CAAc;AACrCkE,cAAI,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWhE,QAAZ,CAAL;AAD+B,SAAd,CAA3B;AAGA,aAAAiE,2BAAA,GAA8B,KAAKvE,EAAL,CAAQI,KAAR,CAAc;AACxC6D,cAAI,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAW3D,QAAZ,CAAL;AADkC,SAAd,CAA9B;AAI+F;;AAbtE;AAAA;AAAA,mCAcd,CAAE;AAdY;AAAA;AAAA,iCAgBhB;AACL,eAAK+D,wBAAL,CAA8BG,KAA9B;AACA,eAAKD,2BAAL,CAAiCC,KAAjC;AACH;AAnBwB;AAAA;AAAA,uCAqBV;AAAA;;AACX,cAAI,KAAKH,wBAAL,CAA8B9D,MAA9B,KAAyC,OAA7C,EAAsD;AAClD,iBAAKN,YAAL,CAAkBO,IAAlB,CAAuB,KAAKiE,2BAA5B,EAAyD/D,MAAzD,CAAgEC,IAAhE,CACI,UAAAD,MAAM,EAAI;AACN,kBAAIA,MAAM,KAAK,WAAf,EAA4B;AACxB,uBAAO,MAAI,CAACR,MAAL,CAAYU,QAAZ,CAAqB,CAAC,YAAD,CAArB,CAAP;AACH;;AACD,oBAAI,CAAC8D,MAAL;;AACA,qBAAO,IAAP;AACH,aAPL,EAQI,UAAA7D,MAAM,EAAI,CAAE,CARhB;AAUH;;AACD,eAAK,IAAMC,GAAX,IAAkB,KAAKuD,wBAAL,CAA8BtD,QAAhD,EAA0D;AACtD,gBAAMC,OAAO,GAAG,KAAKqD,wBAAL,CAA8BtD,QAA9B,CAAuCD,GAAvC,CAAhB;AACAE,mBAAO,CAACC,gBAAR;AACH;AACJ;AAtCwB;AAAA;AAAA,0CAwCP;AAAA;;AACd,cAAI,KAAKsD,2BAAL,CAAiChE,MAAjC,KAA4C,OAAhD,EAAyD;AACrD,iBAAKN,YAAL,CAAkBO,IAAlB,CAAuB,KAAKmE,wBAA5B,EAAsDjE,MAAtD,CAA6DC,IAA7D,CACI,UAAAD,MAAM,EAAI;AACN,kBAAIA,MAAM,KAAK,WAAf,EAA4B;AACxB,uBAAO,MAAI,CAACR,MAAL,CAAYU,QAAZ,CAAqB,CAAC,YAAD,CAArB,CAAP;AACH;;AACD,oBAAI,CAAC8D,MAAL;;AACA,qBAAO,IAAP;AACH,aAPL,EAQI,UAAA7D,MAAM,EAAI,CAAE,CARhB;AAUH;;AACD,eAAK,IAAMC,GAAX,IAAkB,KAAKyD,2BAAL,CAAiCxD,QAAnD,EAA6D;AACzD,gBAAMC,OAAO,GAAG,KAAKuD,2BAAL,CAAiCxD,QAAjC,CAA0CD,GAA1C,CAAhB;AACAE,mBAAO,CAACC,gBAAR;AACH;AACJ;AAED;;AA3DyB;AAAA;AAAA,4BA6DP;AACd,iBAAO,KAAKoD,wBAAL,CAA8BnD,GAA9B,CAAkC,MAAlC,CAAP;AACH;AA/DwB;AAAA;AAAA,4BAiEF;AACnB,iBAAO,KAAK0D,WAAL,CAAiBxD,OAAjB,IAA4B,CAAC,KAAKyD,kBAAzC;AACH;AAnEwB;AAAA;AAAA,4BAqEA;AACrB,iBAAO,KAAKD,WAAL,CAAiBxD,OAAjB,IAA4B,KAAKwD,WAAL,CAAiBtD,QAAjB,CAA0B,UAA1B,CAAnC;AACH;AAvEwB;AAAA;AAAA,4BAyEP;AACd,iBAAO,KAAKiD,2BAAL,CAAiCrD,GAAjC,CAAqC,MAArC,CAAP;AACH;AA3EwB;AAAA;AAAA,4BA6EF;AACnB,iBAAO,KAAKgD,WAAL,CAAiB9C,OAAjB,IAA4B,CAAC,KAAK+C,kBAAzC;AACH;AA/EwB;AAAA;AAAA,4BAiFA;AACrB,iBAAO,KAAKD,WAAL,CAAiB9C,OAAjB,IAA4B,KAAK8C,WAAL,CAAiB5C,QAAjB,CAA0B,UAA1B,CAAnC;AACH;AAnFwB;;AAAA;AAAA,OAA7B;;;;cAa4B;;cAAmC;;cAA0B;;;;AAXrF,8DADC,gEAAU,6BAAV,CACD,E,wEAA8B,yD,CAA9B,G,0BAAA,E,6BAAA,E,MAAA;AAEA,8DADC,gEAAU,0BAAV,CACD,E,wEAA2B,yD,CAA3B,G,0BAAA,E,0BAAA,E,MAAA;AAJS8C,oBAAgB,6DAN5B,gEAAU;AACP7C,cAAQ,EAAE,gBADH;AAEPC,qBAAe,EAAE,sEAAwBC,MAFlC;AAGPC,cAAQ,EAAR;AAAA;AAAA,yHAHO;;;;AAAA,KAAV,CAM4B,E,+EAaD,0D,EAAmC,mE,EAA0B,sD,EAb5D,GAAhB0C,gBAAgB,CAAhB;;;;;;;;;;;;;;;;ACXb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWf,QAAaU,uBAAuB;AAAA;AAAA;AAehC,uCAAoB9E,EAApB,EAA6CC,YAA7C,EAA6EC,MAA7E,EAA6F;AAAA;;AAAzE,aAAAF,EAAA,GAAAA,EAAA;AAAyB,aAAAC,YAAA,GAAAA,YAAA;AAAgC,aAAAC,MAAA,GAAAA,MAAA;AAZ7E,aAAA6E,YAAA,GAAe,KAAK/E,EAAL,CAAQI,KAAR,CACX;AACI4E,mBAAS,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAW1E,QAAZ,CAAL,CADf;AAEI2E,kBAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAW3E,QAAZ,CAAL,CAFd;AAGID,eAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWD,KAAjC,CAAL,CAHX;AAII0B,kBAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWzB,QAAZ,EAAsB,0DAAW0B,SAAX,CAAqB,CAArB,CAAtB,CAAL,CAJd;AAKIkD,yBAAe,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAW5E,QAAZ,CAAL,CALrB;AAMI6E,4BAAkB,EAAE,CAAC,KAAD,EAAQ,CAAC,0DAAWC,YAAZ,CAAR;AANxB,SADW,EASX;AAAEC,mBAAS,EAAE,KAAKC;AAAlB,SATW,CAAf;AAY+F;;AAf/D;AAAA;AAAA,mCAgBrB,CAAE;AAhBmB;AAAA;AAAA,mCAkBrB;AAAA;;AACP,cAAI,KAAKP,YAAL,CAAkBxE,MAAlB,KAA6B,OAAjC,EAA0C;AACtC,iBAAKN,YAAL,CAAkBO,IAAlB,CAAuB,KAAKC,iBAA5B,EAA+CC,MAA/C,CAAsDC,IAAtD,CACI,UAAAD,MAAM,EAAI;AACN,kBAAIA,MAAM,KAAK,WAAf,EAA4B;AACxB,sBAAI,CAACR,MAAL,CAAYU,QAAZ,CAAqB,CAAC,YAAD,CAArB;AACH;AACJ,aALL,EAMI,UAAAC,MAAM,EAAI,CAAE,CANhB;AAQH;;AACD,eAAK,IAAMC,GAAX,IAAkB,KAAKiE,YAAL,CAAkBhE,QAApC,EAA8C;AAC1C,gBAAMC,OAAO,GAAG,KAAK+D,YAAL,CAAkBhE,QAAlB,CAA2BD,GAA3B,CAAhB;AACAE,mBAAO,CAACC,gBAAR;AACH;AACJ;AAjC+B;AAAA;AAAA,wCAmChBb,KAnCgB,EAmCE;AAC9B,cAAMmF,IAAI,GAAGnF,KAAK,CAACW,QAAN,CAAegB,QAAf,CAAwBS,KAArC;AACA,cAAMgD,WAAW,GAAGpF,KAAK,CAACW,QAAN,CAAemE,eAAf,CAA+B1C,KAAnD;AAEA,iBAAO+C,IAAI,KAAKC,WAAT,GAAuB,IAAvB,GAA8B;AAAEC,4BAAgB,EAAE;AAApB,WAArC;AACH;AAED;;AA1CgC;AAAA;AAAA,4BA4CT;AACnB,iBAAO,KAAKV,YAAL,CAAkB7D,GAAlB,CAAsB,WAAtB,CAAP;AACH;AA9C+B;AAAA;AAAA,4BAgDJ;AACxB,iBAAO,KAAKwE,gBAAL,CAAsBtE,OAAtB,IAAiC,CAAC,KAAKuE,uBAA9C;AACH;AAlD+B;AAAA;AAAA,4BAoDF;AAC1B,iBAAO,KAAKD,gBAAL,CAAsBtE,OAAtB,IAAiC,KAAKsE,gBAAL,CAAsBpE,QAAtB,CAA+B,UAA/B,CAAxC;AACH;AAtD+B;AAAA;AAAA,4BAwDV;AAClB,iBAAO,KAAKyD,YAAL,CAAkB7D,GAAlB,CAAsB,UAAtB,CAAP;AACH;AA1D+B;AAAA;AAAA,4BA4DL;AACvB,iBAAO,KAAK0E,eAAL,CAAqBxE,OAArB,IAAgC,CAAC,KAAKyE,sBAA7C;AACH;AA9D+B;AAAA;AAAA,4BAgEH;AACzB,iBAAO,KAAKD,eAAL,CAAqBxE,OAArB,IAAgC,KAAKwE,eAAL,CAAqBtE,QAArB,CAA8B,UAA9B,CAAvC;AACH;AAlE+B;AAAA;AAAA,4BAoEb;AACf,iBAAO,KAAKyD,YAAL,CAAkB7D,GAAlB,CAAsB,OAAtB,CAAP;AACH;AAtE+B;AAAA;AAAA,4BAwER;AACpB,iBAAO,KAAKC,YAAL,CAAkBC,OAAlB,IAA6B,CAAC,KAAKC,mBAA1C;AACH;AA1E+B;AAAA;AAAA,4BA4EN;AACtB,iBACI,KAAKF,YAAL,CAAkBC,OAAlB,KACC,KAAKD,YAAL,CAAkBG,QAAlB,CAA2B,UAA3B,KAA0C,KAAKH,YAAL,CAAkBG,QAAlB,CAA2B,OAA3B,CAD3C,CADJ;AAIH;AAjF+B;AAAA;AAAA,4BAmFV;AAClB,iBAAO,KAAKyD,YAAL,CAAkB7D,GAAlB,CAAsB,UAAtB,CAAP;AACH;AArF+B;AAAA;AAAA,4BAuFL;AACvB,iBAAO,KAAKgB,eAAL,CAAqBd,OAArB,IAAgC,CAAC,KAAKe,sBAA7C;AACH;AAzF+B;AAAA;AAAA,4BA2FH;AACzB,iBACI,KAAKD,eAAL,CAAqBd,OAArB,KACC,KAAKc,eAAL,CAAqBZ,QAArB,CAA8B,UAA9B,KACG,KAAKY,eAAL,CAAqBZ,QAArB,CAA8B,WAA9B,CAFJ,CADJ;AAKH;AAjG+B;AAAA;AAAA,4BAmGH;AACzB,iBAAO,KAAKyD,YAAL,CAAkB7D,GAAlB,CAAsB,iBAAtB,CAAP;AACH;AArG+B;AAAA;AAAA,4BAuGE;AAC9B,iBAAO,KAAK4E,sBAAL,CAA4B1E,OAA5B,IAAuC,CAAC,KAAK2E,6BAApD;AACH;AAzG+B;AAAA;AAAA,4BA2GI;AAChC,iBACI,KAAKD,sBAAL,CAA4B1E,OAA5B,KACC,KAAK0E,sBAAL,CAA4BxE,QAA5B,CAAqC,UAArC,KACG,KAAKwE,sBAAL,CAA4BxE,QAA5B,CAAqC,WAArC,CADH,IAEG,KAAKyD,YAAL,CAAkBzD,QAAlB,CAA2B,kBAA3B,CAHJ,CADJ;AAMH;AAlH+B;AAAA;AAAA,4BAoHA;AAC5B,iBAAO,KAAKyD,YAAL,CAAkB7D,GAAlB,CAAsB,oBAAtB,CAAP;AACH;AAtH+B;AAAA;AAAA,4BAwHK;AACjC,iBAAO,KAAK8E,yBAAL,CAA+B5E,OAA/B,IAA0C,CAAC,KAAK6E,gCAAvD;AACH;AA1H+B;AAAA;AAAA,4BA4HO;AACnC,iBACI,KAAKD,yBAAL,CAA+B5E,OAA/B,IACA,KAAK4E,yBAAL,CAA+B1E,QAA/B,CAAwC,UAAxC,CAFJ;AAIH;AAjI+B;;AAAA;AAAA,OAApC;;;;cAe4B;;cAAmC;;cAA0B;;;;AAdrD,8DAA/B,gEAAU,mBAAV,CAA+B,E,wEAAoB,yD,CAApB,G,iCAAA,E,mBAAA,E,MAAA;AADvBwD,2BAAuB,6DANnC,gEAAU;AACPvD,cAAQ,EAAE,uBADH;AAEPC,qBAAe,EAAE,sEAAwBC,MAFlC;AAGPC,cAAQ,EAAR;AAAA;AAAA,uIAHO;;;;AAAA,KAAV,CAMmC,E,+EAeR,0D,EAAmC,mE,EAA0B,sD,EAfrD,GAAvBoD,uBAAuB,CAAvB;;;;;;;;;;;;;;;;ACXb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACaf,QAAaoB,iBAAiB;AAAA;AAAA;AAe1B,iCACYlG,EADZ,EAEYC,YAFZ,EAGYC,MAHZ,EAIYmC,WAJZ,EAIoC;AAAA;;AAHxB,aAAArC,EAAA,GAAAA,EAAA;AACA,aAAAC,YAAA,GAAAA,YAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AACA,aAAAmC,WAAA,GAAAA,WAAA;AAhBZ,aAAAC,KAAA,GAAQ,EAAR;AACA,aAAAyC,YAAA,GAAe,KAAK/E,EAAL,CAAQI,KAAR,CACX;AACI4E,mBAAS,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAW1E,QAAZ,CAAL,CADf;AAEI2E,kBAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAW3E,QAAZ,CAAL,CAFd;AAGID,eAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWD,KAAjC,CAAL,CAHX;AAII0B,kBAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWzB,QAAZ,EAAsB,0DAAW0B,SAAX,CAAqB,CAArB,CAAtB,CAAL,CAJd;AAKIkD,yBAAe,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAW5E,QAAZ,CAAL;AALrB,SADW,EAQX;AAAE+E,mBAAS,EAAE,KAAKC;AAAlB,SARW,CAAf;AAgBI;;AApBsB;AAAA;AAAA,mCAqBf;AACP,eAAKjD,WAAL,CAAiB8D,SAAjB;AACAvD,iBAAO,CAACC,GAAR,CAAY,KAAZ;AACH;AAxByB;AAAA;AAAA,mCA0Bf;AAAA;;AACP,cAAMxC,KAAK,GAAG,KAAK0E,YAAL,CAAkBvC,KAAlB,CAAwBnC,KAAtC;AACA,cAAM0B,QAAQ,GAAG,KAAKgD,YAAL,CAAkBvC,KAAlB,CAAwBT,QAAzC;AACA,cAAIU,OAAJ;;AAEA,cAAI,KAAKsC,YAAL,CAAkBxE,MAAlB,KAA6B,OAAjC,EAA0C;AACtCkC,mBAAO,GAAG,KAAKJ,WAAL,CAAiB+D,MAAjB,CAAwB/F,KAAxB,EAA+B0B,QAA/B,CAAV;AACAU,mBAAO,CAACK,SAAR,CACI,UAAAC,OAAO,EAAI;AACPH,qBAAO,CAACC,GAAR,CAAYE,OAAZ;;AACA,oBAAI,CAAC9C,YAAL,CAAkBO,IAAlB,CAAuB,MAAI,CAACC,iBAA5B,EAA+CC,MAA/C,CAAsDC,IAAtD,CACI,UAAAD,MAAM,EAAI;AACN,oBAAIA,MAAM,KAAK,SAAf,EAA0B;AACtB,wBAAI,CAACR,MAAL,CAAYU,QAAZ,CAAqB,CAAC,eAAD,CAArB;AACH;AACJ,eALL,EAMI,UAAAC,MAAM,EAAI,CAAE,CANhB;AAQH,aAXL,EAYI,UAAAyC,YAAY,EAAI;AACZV,qBAAO,CAACC,GAAR,CAAYS,YAAZ;AACA,oBAAI,CAAChB,KAAL,GAAagB,YAAb;AACH,aAfL;AAiBH,WAnBD,MAmBO;AACH,iBAAKrD,YAAL,CAAkBO,IAAlB,CAAuB,KAAK+C,UAA5B,EAAwC7C,MAAxC,CAA+CC,IAA/C,CACI,UAAAD,MAAM,EAAI;AACN,kBAAIA,MAAM,KAAK,OAAf,EAAwB;AACpB,sBAAI,CAAC4B,KAAL,GAAa5B,MAAb;AACAkC,uBAAO,CAACC,GAAR,CAAYnC,MAAZ;;AACA,sBAAI,CAACR,MAAL,CAAYU,QAAZ,CAAqB,CAAC,gBAAD,CAArB;AACH;AACJ,aAPL,EAQI,UAAAC,MAAM,EAAI,CAAE,CARhB;AAUH;;AACD,eAAK,IAAMC,GAAX,IAAkB,KAAKiE,YAAL,CAAkBhE,QAApC,EAA8C;AAC1C,gBAAMC,OAAO,GAAG,KAAK+D,YAAL,CAAkBhE,QAAlB,CAA2BD,GAA3B,CAAhB;AACAE,mBAAO,CAACC,gBAAR;AACH;AACJ;AAlEyB;AAAA;AAAA,wCAmEVb,KAnEU,EAmEQ;AAC9B,cAAMmF,IAAI,GAAGnF,KAAK,CAACW,QAAN,CAAegB,QAAf,CAAwBS,KAArC;AACA,cAAMgD,WAAW,GAAGpF,KAAK,CAACW,QAAN,CAAemE,eAAf,CAA+B1C,KAAnD;AACA,iBAAO+C,IAAI,KAAKC,WAAT,GAAuB,IAAvB,GAA8B;AAAEC,4BAAgB,EAAE;AAApB,WAArC;AACH;AACD;;AAxE0B;AAAA;AAAA,4BAwEoB;AAC1C,iBAAO,KAAKV,YAAL,CAAkB7D,GAAlB,CAAsB,WAAtB,CAAP;AACH;AA1EyB;AAAA;AAAA,4BA2EE;AACxB,iBAAO,KAAKwE,gBAAL,CAAsBtE,OAAtB,IAAiC,CAAC,KAAKuE,uBAA9C;AACH;AA7EyB;AAAA;AAAA,4BA8EI;AAC1B,iBAAO,KAAKD,gBAAL,CAAsBtE,OAAtB,IAAiC,KAAKsE,gBAAL,CAAsBpE,QAAtB,CAA+B,UAA/B,CAAxC;AACH;AAhFyB;AAAA;AAAA,4BAiFJ;AAClB,iBAAO,KAAKyD,YAAL,CAAkB7D,GAAlB,CAAsB,UAAtB,CAAP;AACH;AAnFyB;AAAA;AAAA,4BAoFC;AACvB,iBAAO,KAAK0E,eAAL,CAAqBxE,OAArB,IAAgC,CAAC,KAAKyE,sBAA7C;AACH;AAtFyB;AAAA;AAAA,4BAuFG;AACzB,iBAAO,KAAKD,eAAL,CAAqBxE,OAArB,IAAgC,KAAKwE,eAAL,CAAqBtE,QAArB,CAA8B,UAA9B,CAAvC;AACH;AAzFyB;AAAA;AAAA,4BA0FP;AACf,iBAAO,KAAKyD,YAAL,CAAkB7D,GAAlB,CAAsB,OAAtB,CAAP;AACH;AA5FyB;AAAA;AAAA,4BA6FF;AACpB,iBAAO,KAAKC,YAAL,CAAkBC,OAAlB,IAA6B,CAAC,KAAKC,mBAA1C;AACH;AA/FyB;AAAA;AAAA,4BAgGA;AACtB,iBACI,KAAKF,YAAL,CAAkBC,OAAlB,KACC,KAAKD,YAAL,CAAkBG,QAAlB,CAA2B,UAA3B,KAA0C,KAAKH,YAAL,CAAkBG,QAAlB,CAA2B,OAA3B,CAD3C,CADJ;AAIH;AArGyB;AAAA;AAAA,4BAsGJ;AAClB,iBAAO,KAAKyD,YAAL,CAAkB7D,GAAlB,CAAsB,UAAtB,CAAP;AACH;AAxGyB;AAAA;AAAA,4BAyGC;AACvB,iBAAO,KAAKgB,eAAL,CAAqBd,OAArB,IAAgC,CAAC,KAAKe,sBAA7C;AACH;AA3GyB;AAAA;AAAA,4BA4GG;AACzB,iBACI,KAAKD,eAAL,CAAqBd,OAArB,KACC,KAAKc,eAAL,CAAqBZ,QAArB,CAA8B,UAA9B,KACG,KAAKY,eAAL,CAAqBZ,QAArB,CAA8B,WAA9B,CAFJ,CADJ;AAKH;AAlHyB;AAAA;AAAA,4BAmHG;AACzB,iBAAO,KAAKyD,YAAL,CAAkB7D,GAAlB,CAAsB,iBAAtB,CAAP;AACH;AArHyB;AAAA;AAAA,4BAsHQ;AAC9B,iBAAO,KAAK4E,sBAAL,CAA4B1E,OAA5B,IAAuC,CAAC,KAAK2E,6BAApD;AACH;AAxHyB;AAAA;AAAA,4BAyHU;AAChC,iBACI,KAAKD,sBAAL,CAA4B1E,OAA5B,KACC,KAAK0E,sBAAL,CAA4BxE,QAA5B,CAAqC,UAArC,KACG,KAAKwE,sBAAL,CAA4BxE,QAA5B,CAAqC,WAArC,CADH,IAEG,KAAKyD,YAAL,CAAkBzD,QAAlB,CAA2B,kBAA3B,CAHJ,CADJ;AAMH;AAhIyB;;AAAA;AAAA,OAA9B;;;;cAgBoB;;cACU;;cACN;;cACK;;;;AAlBO,8DAA/B,gEAAU,mBAAV,CAA+B,E,wEAAoB,yD,CAApB,G,2BAAA,E,mBAAA,E,MAAA;AACP,8DAAxB,gEAAU,YAAV,CAAwB,E,wEAAa,yD,CAAb,G,2BAAA,E,YAAA,E,MAAA;AAFhB4E,qBAAiB,6DAN7B,gEAAU;AACP3E,cAAQ,EAAE,aADH;AAEPC,qBAAe,EAAE,sEAAwBC,MAFlC;AAGPC,cAAQ,EAAR;AAAA;AAAA,yHAHO;;;;AAAA,KAAV,CAM6B,E,+EAgBV,0D,EACU,mE,EACN,sD,EACK,kE,EAnBC,GAAjBwE,iBAAiB,CAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRb,QAAaG,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,sCACP;AACP,iBAAO,gDAAG,IAAH,CAAP;AACH;AAHiB;;AAAA;AAAA,OAAtB;;AAAaA,aAAS,6DADrB,kEACqB,GAATA,SAAS,CAAT;AAOb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVO,QAAMC,MAAM,GAAG,CAAC,qDAAD,CAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oDCFP;;;AAQA,QAAaC,sBAAsB;AAAA;AAAA;AAC/B,sCAAoBlE,WAApB,EAA8C;AAAA;;AAA1B,aAAAA,WAAA,GAAAA,WAAA;AAA4B;AAEhD;;;;;;;;;;;;;;;AAH+B;AAAA;AAAA,kCAkBrBmE,GAlBqB,EAkBEvD,IAlBF,EAkBqB;AAChD,iBAAO,KAAKZ,WAAL,CAAiBoE,IAAjB,CAAsBC,IAAtB,CACL,4DAAK,CAAL,CADK,EAEL,kEAAW,UAAAD,IAAI,EAAI;AACjB,gBAAI,CAACA,IAAL,EAAW;AACT,qBAAOxD,IAAI,CAAC0D,MAAL,CAAYH,GAAZ,CAAP;AACD;;AACD,gBAAMI,OAAO,GAAGJ,GAAG,CAACK,KAAJ,CAAU;AACxBC,oBAAM,EAAE,IAAI,+DAAJ,GAAiBC,GAAjB,CAAqB,MAArB,EAA6BN,IAAI,CAAClE,KAAlC;AADgB,aAAV,CAAhB;AAGA,mBAAOU,IAAI,CAAC0D,MAAL,CAAYC,OAAZ,CAAP;AACD,WARD,CAFK,CAAP;AAYD;AA/B4B;;AAAA;AAAA,OAAnC;;;;cACqC;;;;AADxBL,0BAAsB,6DADlC,kEACkC,E,+EACE,yD,EADF,GAAtBA,sBAAsB,CAAtB;AAqCL","file":"modules-auth-auth-routing-module-es5.js","sourcesContent":["export default \"<sb-layout-auth\\n    ><div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-center\\\">\\n            <div class=\\\"col-xl-5 col-lg-6 col-md-8 col-sm-11\\\">\\n                <div class=\\\"card my-5\\\">\\n                    <div class=\\\"card-body p-5 text-center\\\"><div class=\\\"h3 font-weight-light mb-0\\\">Password Recovery</div></div>\\n                    <hr class=\\\"my-0\\\" />\\n                    <div class=\\\"card-body p-5\\\">\\n                        <div class=\\\"text-center small text-muted mb-4\\\">Enter your email address below and we will send you a link to reset your password.</div>\\n                        <form [formGroup]=\\\"forgotPasswordForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                            <div class=\\\"form-group\\\">\\n                                <label class=\\\"text-gray-600 small\\\" for=\\\"inputEmailAddress\\\">Email address</label><input class=\\\"form-control sb-form-control-solid py-4\\\" id=\\\"inputEmailAddress\\\" data-cy=\\\"emailInput\\\" type=\\\"email\\\" aria-describedby=\\\"emailHelp\\\" formControlName=\\\"email\\\" [class.is-valid]=\\\"emailControlValid\\\" [class.is-invalid]=\\\"emailControlInvalid\\\" />\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='emailControl.hasError(\\\"required\\\")'>Email required.</div>\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='emailControl.hasError(\\\"email\\\")'>Email is not valid.</div>\\n                            </div>\\n                            <div class=\\\"form-group mb-0\\\"><button class=\\\"btn btn-primary\\\" data-cy=\\\"resetPasswordButton\\\" type=\\\"submit\\\" [disabled]=\\\"forgotPasswordForm.invalid\\\">Reset Password</button></div>\\n                        </form>\\n                    </div>\\n                    <hr class=\\\"my-0\\\" />\\n                    <div class=\\\"card-body px-5 py-4\\\">\\n                        <div class=\\\"small text-center\\\">New user? <a routerLink=\\\"/auth/register-social\\\">Create an account!</a></div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div></sb-layout-auth\\n><ng-template #confirmationModal let-modal\\n    ><div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title\\\">Forgot Password Form Data</h5>\\n        <button class=\\\"close\\\" type=\\\"button\\\" aria-label=\\\"Close\\\" (click)='modal.dismiss(\\\"Cross click\\\")'><span aria-hidden=\\\"true\\\">×</span></button>\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n        Wired up and ready to go. Just add a backend. <br /><br />\\n        email: <code>{{forgotPasswordForm.value.email}}</code>\\n    </div>\\n    <div class=\\\"modal-footer\\\"><button class=\\\"btn btn-secondary\\\" type=\\\"button\\\" (click)=\\\"modal.close()\\\">Close</button><button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)='modal.close(\\\"DASHBOARD\\\")'>Proceed back to Dashboard</button></div></ng-template\\n>\\n\"","export default \"<sb-layout-auth\\n    ><div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-center\\\">\\n            <div class=\\\"col-lg-5\\\">\\n                <div class=\\\"card shadow-lg border-0 rounded-lg mt-5\\\">\\n                    <div class=\\\"card-header justify-content-center\\\"><h3 class=\\\"font-weight-light my-4\\\">Password Recovery</h3></div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"small mb-3 text-muted\\\">Enter your email address and we will send you a link to reset your password.</div>\\n                        <form [formGroup]=\\\"forgotPasswordForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                            <div class=\\\"form-group\\\">\\n                                <label class=\\\"small mb-1\\\" for=\\\"inputEmailAddress\\\">Email</label><input class=\\\"form-control py-4\\\" id=\\\"inputEmailAddress\\\" data-cy=\\\"emailInput\\\" type=\\\"email\\\" placeholder=\\\"Enter email address\\\" aria-describedby=\\\"emailHelp\\\" formControlName=\\\"email\\\" [class.is-valid]=\\\"emailControlValid\\\" [class.is-invalid]=\\\"emailControlInvalid\\\" />\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='emailControl.hasError(\\\"required\\\")'>Email required.</div>\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='emailControl.hasError(\\\"email\\\")'>Email is not valid.</div>\\n                            </div>\\n                            <div class=\\\"form-group d-flex align-items-center justify-content-between mt-4 mb-0\\\"><a class=\\\"small\\\" routerLink=\\\"/auth/login\\\">Return to login</a><button class=\\\"btn btn-primary\\\" data-cy=\\\"resetPasswordButton\\\" type=\\\"submit\\\" [disabled]=\\\"forgotPasswordForm.invalid\\\">Reset Password</button></div>\\n                        </form>\\n                    </div>\\n                    <div class=\\\"card-footer text-center\\\">\\n                        <div class=\\\"small\\\"><a routerLink=\\\"/auth/register\\\">Need an account? Sign up!</a></div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div></sb-layout-auth\\n><ng-template #confirmationModal let-modal\\n    ><div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title\\\">Forgot Password Form Data</h5>\\n        <button class=\\\"close\\\" type=\\\"button\\\" aria-label=\\\"Close\\\" (click)='modal.dismiss(\\\"Cross click\\\")'><span aria-hidden=\\\"true\\\">×</span></button>\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n        Wired up and ready to go. Just add a backend. <br /><br />\\n        email: <code>{{forgotPasswordForm.value.email}}</code>\\n    </div>\\n    <div class=\\\"modal-footer\\\"><button class=\\\"btn btn-secondary\\\" type=\\\"button\\\" (click)=\\\"modal.close()\\\">Close</button><button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)='modal.close(\\\"DASHBOARD\\\")'>Proceed back to Dashboard</button></div></ng-template\\n>\\n\"","export default \"<sb-layout-auth\\n    ><div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-center\\\">\\n            <div class=\\\"col-xl-5 col-lg-6 col-md-8 col-sm-11\\\">\\n                <div class=\\\"card my-5\\\">\\n                    <div class=\\\"card-body p-5 text-center\\\">\\n                        <div class=\\\"h3 font-weight-light mb-3\\\">Sign In</div>\\n                        <button class=\\\"btn sb-btn-icon sb-btn-facebook mx-1\\\"><fa-icon [icon]='[\\\"fab\\\", \\\"facebook-f\\\"]'></fa-icon></button><button class=\\\"btn sb-btn-icon sb-btn-github mx-1\\\"><fa-icon [icon]='[\\\"fab\\\", \\\"github\\\"]'></fa-icon></button><button class=\\\"btn sb-btn-icon sb-btn-google mx-1\\\"><fa-icon [icon]='[\\\"fab\\\", \\\"google\\\"]'></fa-icon></button><button class=\\\"btn sb-btn-icon sb-btn-twitter mx-1\\\"><fa-icon [icon]='[\\\"fab\\\", \\\"twitter\\\"]'></fa-icon></button>\\n                    </div>\\n                    <hr class=\\\"my-0\\\" />\\n                    <div class=\\\"card-body p-5\\\">\\n                        <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                            <div class=\\\"form-group\\\">\\n                                <label class=\\\"text-gray-600 small\\\" for=\\\"inputEmailAddress\\\">Email address</label><input class=\\\"form-control sb-form-control-solid py-4\\\" id=\\\"inputEmailAddress\\\" data-cy=\\\"emailInput\\\" type=\\\"email\\\" placeholder=\\\"Enter email address\\\" aria-describedby=\\\"emailHelp\\\" formControlName=\\\"email\\\" [class.is-valid]=\\\"emailControlValid\\\" [class.is-invalid]=\\\"emailControlInvalid\\\" />\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='emailControl.hasError(\\\"required\\\")'>Email required.</div>\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='emailControl.hasError(\\\"email\\\")'>Email is not valid.</div>\\n                            </div>\\n                            <div class=\\\"form-group\\\">\\n                                <label class=\\\"text-gray-600 small\\\" for=\\\"inputPassword\\\">Password</label><input class=\\\"form-control sb-form-control-solid py-4\\\" id=\\\"inputPassword\\\" data-cy=\\\"passwordInput\\\" type=\\\"password\\\" placeholder=\\\"Enter password\\\" formControlName=\\\"password\\\" [class.is-valid]=\\\"passwordControlValid\\\" [class.is-invalid]=\\\"passwordControlInvalid\\\" />\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='passwordControl.hasError(\\\"required\\\")'>Password required.</div>\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='passwordControl.hasError(\\\"minlength\\\")'>Password must be at least 8 characters.</div>\\n                            </div>\\n                            <div class=\\\"form-group\\\"><a class=\\\"small\\\" routerLink=\\\"/auth/forgot-password\\\">Forgot your password?</a></div>\\n                            <div class=\\\"form-group d-flex align-items-center justify-content-between mb-0\\\">\\n                                <div class=\\\"custom-control sb-custom-control-solid custom-checkbox\\\"><input class=\\\"custom-control-input small\\\" id=\\\"rememberPasswordCheck\\\" data-cy=\\\"rememberPasswordCheck\\\" type=\\\"checkbox\\\" formControlName=\\\"checkbox\\\" /><label class=\\\"custom-control-label\\\" for=\\\"rememberPasswordCheck\\\">Remember password</label></div>\\n                                <button class=\\\"btn btn-primary\\\" data-cy=\\\"loginButton\\\" type=\\\"submit\\\" [disabled]=\\\"loginForm.invalid\\\">Login</button>\\n                            </div>\\n                        </form>\\n                    </div>\\n                    <hr class=\\\"my-0\\\" />\\n                    <div class=\\\"card-body px-5 py-4\\\">\\n                        <div class=\\\"small text-center\\\">New user? <a routerLink=\\\"/auth/register-social\\\">Create an account!</a></div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div></sb-layout-auth\\n><ng-template #confirmationModal let-modal\\n    ><div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title\\\">Login Form Data</h5>\\n        <button class=\\\"close\\\" type=\\\"button\\\" aria-label=\\\"Close\\\" (click)='modal.dismiss(\\\"Cross click\\\")'><span aria-hidden=\\\"true\\\">×</span></button>\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n        Wired up and ready to go. Just add a backend. <br /><br />\\n        email: <code>{{loginForm.value.email}}</code>\\n        <br />\\n        password: <code>{{loginForm.value.password}}</code>\\n        <br />\\n        remember password: <code>{{loginForm.value.checkbox}}</code>\\n    </div>\\n    <div class=\\\"modal-footer\\\"><button class=\\\"btn btn-secondary\\\" type=\\\"button\\\" (click)=\\\"modal.close()\\\">Close</button><button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)='modal.close(\\\"DASHBOARD\\\")'>Proceed back to Dashboard</button></div></ng-template\\n>\\n\"","export default \"<sb-layout-auth>\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row justify-content-center\\\">\\r\\n        <div class=\\\"col-lg-5\\\">\\r\\n          <div class=\\\"card shadow-lg border-0 rounded-lg mt-5\\\">\\r\\n            <div class=\\\"card-header justify-content-center\\\"><img class=\\\"pslogo\\\" src=\\\"https://peak-soft.de/wp-content/uploads/2019/12/1627_PeakSoftGmbH_Logo_DA.png\\\" alt=\\\"peak-soft-logo\\\" /></div>\\r\\n            <!-- <div class=\\\"card-header justify-content-center\\\"><h4 class=\\\"font-weight-light my-4\\\">Login</h4></div> -->\\r\\n            <div class=\\\"card-body\\\">\\r\\n              <div class=\\\"justify-content-center\\\"><h5 class=\\\"font-weight-light\\\">Login</h5></div>\\r\\n              <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label class=\\\"small mb-1\\\" for=\\\"inputEmailAddress\\\">Email</label>\\r\\n                  <input\\r\\n                    class=\\\"form-control py-4\\\"\\r\\n                    id=\\\"inputEmailAddress\\\"\\r\\n                    data-cy=\\\"emailInput\\\"\\r\\n                    type=\\\"email\\\"\\r\\n                    placeholder=\\\"Enter email address\\\"\\r\\n                    aria-describedby=\\\"emailHelp\\\"\\r\\n                    formControlName=\\\"email\\\"\\r\\n                    [class.is-valid]=\\\"emailControlValid\\\"\\r\\n                    [class.is-invalid]=\\\"emailControlInvalid\\\"\\r\\n                  />\\r\\n                  <div class=\\\"invalid-feedback\\\" *ngIf='emailControl.hasError(\\\"required\\\")'>Email required.</div>\\r\\n                  <div class=\\\"invalid-feedback\\\" *ngIf='emailControl.hasError(\\\"email\\\")'>Email is not valid.</div>\\r\\n                </div>\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <label class=\\\"small mb-1\\\" for=\\\"inputPassword\\\">Password</label>\\r\\n                  <input\\r\\n                    class=\\\"form-control py-4\\\"\\r\\n                    id=\\\"inputPassword\\\"\\r\\n                    data-cy=\\\"passwordInput\\\"\\r\\n                    type=\\\"password\\\"\\r\\n                    placeholder=\\\"Enter password\\\"\\r\\n                    formControlName=\\\"password\\\"\\r\\n                    [class.is-valid]=\\\"passwordControlValid\\\"\\r\\n                    [class.is-invalid]=\\\"passwordControlInvalid\\\"\\r\\n                  />\\r\\n                  <div class=\\\"invalid-feedback\\\" *ngIf='passwordControl.hasError(\\\"required\\\")'>Password required.</div>\\r\\n                  <div class=\\\"invalid-feedback\\\" *ngIf='passwordControl.hasError(\\\"minlength\\\")'>Password must be at least 8 characters.</div>\\r\\n                </div>\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <div class=\\\"custom-control custom-checkbox\\\">\\r\\n                    <input class=\\\"custom-control-input\\\" id=\\\"rememberPasswordCheck\\\" data-cy=\\\"rememberPasswordCheck\\\" type=\\\"checkbox\\\" formControlName=\\\"checkbox\\\" />\\r\\n                    <label class=\\\"custom-control-label\\\" for=\\\"rememberPasswordCheck\\\">Remember password</label>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"form-group d-flex align-items-center justify-content-between mt-4 mb-0\\\">\\r\\n                  <a class=\\\"small\\\" routerLink=\\\"/auth/forgot-password\\\">Forgot Password?</a>\\r\\n                  <button \\r\\n                    id=\\\"login-btn\\\"\\r\\n                    class=\\\"btn btn-primary\\\" \\r\\n                    data-cy=\\\"loginButton\\\" \\r\\n                    type=\\\"submit\\\" \\r\\n                    [disabled]=\\\"loginForm.invalid\\\">\\r\\n                  Login\\r\\n                </button>\\r\\n                </div>\\r\\n              </form>\\r\\n            </div>\\r\\n            <div class=\\\"card-footer text-center\\\">\\r\\n              <div class=\\\"small\\\"><a routerLink=\\\"/auth/register\\\">Need an account? Sign up!</a></div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </sb-layout-auth>\\r\\n  <ng-template #confirmationModal let-modal>\\r\\n    <div class=\\\"modal-header\\\">\\r\\n      <h5 class=\\\"modal-title\\\">Login Form Data</h5>\\r\\n      <button class=\\\"close\\\" type=\\\"button\\\" aria-label=\\\"Close\\\" (click)='modal.dismiss(\\\"Cross click\\\")'><span aria-hidden=\\\"true\\\">×</span></button>\\r\\n    </div>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n      Wired up and ready to go. Just add a backend. <br />\\r\\n      <br />\\r\\n      email: <code>{{loginForm.value.email}}</code>\\r\\n      <br />\\r\\n      password: <code>{{loginForm.value.password}}</code>\\r\\n      <br />\\r\\n      remember password: <code>{{loginForm.value.checkbox}}</code>\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\"><button class=\\\"btn btn-secondary\\\" type=\\\"button\\\" (click)=\\\"modal.close()\\\">Close</button><button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)='modal.close(\\\"DASHBOARD\\\")'>Proceed back to Dashboard</button></div>\\r\\n  </ng-template>\\r\\n  \"","export default \"<sb-layout-auth\\n    ><div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-center\\\">\\n            <!-- Create Organization-->\\n            <div class=\\\"col-xl-5 col-lg-6 col-md-8 col-sm-11\\\">\\n                <div class=\\\"card mt-5\\\">\\n                    <div class=\\\"card-body p-5 text-center\\\">\\n                        <div class=\\\"sb-icons-org-create align-items-center mx-auto\\\"><i-feather class=\\\"sb-icon-users\\\" name=\\\"users\\\"></i-feather><fa-icon class=\\\"sb-icon-plus\\\" [icon]='[\\\"fas\\\", \\\"plus\\\"]'></fa-icon></div>\\n                        <div class=\\\"h3 text-primary font-weight-300 mb-0\\\">Who else is part of this organization?</div>\\n                    </div>\\n                    <hr class=\\\"m-0\\\" />\\n                    <div class=\\\"card-body p-5\\\">\\n                        <form [formGroup]=\\\"addUsersForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                            <div formArrayName=\\\"emails\\\" *ngFor=\\\"let email of emails.controls; let i=index\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <input class=\\\"form-control form-control-solid\\\" [attr.data-cy]='\\\"emailInput_\\\" + i' type=\\\"text\\\" placeholder=\\\"name@example.com\\\" [formControlName]=\\\"i\\\" [class.is-valid]=\\\"emailControlValid(i)\\\" [class.is-invalid]=\\\"emailControlInvalid(i)\\\" />\\n                                    <div class=\\\"invalid-feedback\\\" *ngIf='email.hasError(\\\"required\\\")'>Email required.</div>\\n                                    <div class=\\\"invalid-feedback\\\" *ngIf='email.hasError(\\\"email\\\")'>Email is not valid.</div>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"form-group text-right\\\">\\n                                <button class=\\\"btn btn-link p-0\\\" data-cy=\\\"addAnotherButton\\\" [disabled]=\\\"addUsersForm.invalid\\\" (click)=\\\"addAnother()\\\"><fa-icon class=\\\"sb-icon-plus-circle mr-1\\\" [icon]='[\\\"fas\\\", \\\"plus-circle\\\"]'></fa-icon>Add another</button>\\n                            </div>\\n                            <div class=\\\"form-group\\\"><button class=\\\"btn btn-block btn-primary\\\" data-cy=\\\"addMembersButton\\\" type=\\\"submit\\\" [disabled]=\\\"addUsersForm.invalid\\\">Add Members</button></div>\\n                            <div class=\\\"form-group mb-5\\\">\\n                                <a class=\\\"d-flex align-items-center\\\" href=\\\"javascript:void(0);\\\"><i-feather class=\\\"mr-1\\\" name=\\\"link\\\"></i-feather>Get an invite link to share</a>\\n                            </div>\\n                            <div class=\\\"form-group mb-0 text-center\\\">Or, <a routerLink=\\\"/dashboard\\\">skip for now</a></div>\\n                        </form>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div></sb-layout-auth\\n><ng-template #confirmationModal let-modal\\n    ><div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title\\\">Add Members Data</h5>\\n        <button class=\\\"close\\\" type=\\\"button\\\" aria-label=\\\"Close\\\" (click)='modal.dismiss(\\\"Cross click\\\")'><span aria-hidden=\\\"true\\\">×</span></button>\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n        Wired up and ready to go. Just add a backend.<br /><br /><span *ngFor=\\\"let email of emails.controls\\\"><code>{{email.value}}</code><br /></span>\\n    </div>\\n    <div class=\\\"modal-footer\\\"><button class=\\\"btn btn-secondary\\\" type=\\\"button\\\" (click)=\\\"modal.close()\\\">Close</button><button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)='modal.close(\\\"DASHBOARD\\\")'>Proceed back to Dashboard</button></div></ng-template\\n>\\n\"","export default \"<sb-layout-auth\\n    ><div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-center\\\">\\n            <!-- Create Organization-->\\n            <div class=\\\"col-xl-4 col-lg-6 col-md-8 col-sm-11\\\">\\n                <div class=\\\"card mt-5\\\">\\n                    <div class=\\\"card-body px-5 pt-5 text-center\\\">\\n                        <div class=\\\"h3 text-primary font-weight-300\\\">Create</div>\\n                        <p class=\\\"text-muted\\\">Create an organization and invite new members</p>\\n                        <div class=\\\"sb-icons-org-create align-items-center mx-auto\\\"><i-feather class=\\\"sb-icon-users\\\" name=\\\"users\\\"></i-feather><fa-icon class=\\\"sb-icon-plus\\\" [icon]='[\\\"fas\\\", \\\"plus\\\"]'></fa-icon></div>\\n                    </div>\\n                    <hr class=\\\"my-0\\\" />\\n                    <div class=\\\"card-body px-5 py-4\\\">\\n                        <div class=\\\"small text-center\\\"><a class=\\\"btn btn-block btn-primary\\\" data-cy=\\\"createNewOrganization\\\" routerLink=\\\"/auth/org-create\\\">Create new organization</a></div>\\n                    </div>\\n                </div>\\n            </div>\\n            <!-- Join Organization-->\\n            <div class=\\\"col-xl-4 col-lg-6 col-md-8 col-sm-11\\\">\\n                <div class=\\\"card mt-5\\\">\\n                    <div class=\\\"card-body px-5 pt-5 text-center\\\">\\n                        <div class=\\\"h3 text-secondary font-weight-300\\\">Join</div>\\n                        <p class=\\\"text-muted\\\">Enter an access code or request access to an existing organization</p>\\n                        <div class=\\\"sb-icons-org-join align-items-center mx-auto\\\"><i-feather class=\\\"sb-icon-user\\\" name=\\\"user\\\"></i-feather><fa-icon class=\\\"sb-icon-arrow d-inline-flex\\\" [icon]='[\\\"fas\\\", \\\"long-arrow-alt-right\\\"]'></fa-icon><i-feather class=\\\"sb-icon-users\\\" name=\\\"users\\\"></i-feather></div>\\n                    </div>\\n                    <hr class=\\\"my-0\\\" />\\n                    <div class=\\\"card-body px-5 py-4\\\">\\n                        <div class=\\\"small text-center\\\"><a class=\\\"btn btn-block btn-secondary\\\" data-cy=\\\"joinOrganization\\\" routerLink=\\\"/auth/org-join\\\">Join an organization</a></div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div></sb-layout-auth\\n>\\n\"","export default \"<sb-layout-auth\\n    ><div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-center\\\">\\n            <div class=\\\"col-xl-5 col-lg-6 col-md-8 col-sm-11\\\">\\n                <div class=\\\"card mt-5\\\">\\n                    <div class=\\\"card-body p-5 text-center\\\">\\n                        <div class=\\\"sb-icons-org-create align-items-center mx-auto\\\"><i-feather class=\\\"sb-icon-users\\\" name=\\\"users\\\"></i-feather><fa-icon class=\\\"sb-icon-plus\\\" [icon]='[\\\"fas\\\", \\\"plus\\\"]'></fa-icon></div>\\n                        <div class=\\\"h3 text-primary font-weight-300 mb-0\\\">Create an Organization</div>\\n                    </div>\\n                    <hr class=\\\"m-0\\\" />\\n                    <div class=\\\"card-body p-5\\\">\\n                        <form [formGroup]=\\\"organizationNewForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                            <div class=\\\"form-group\\\">\\n                                <input class=\\\"form-control form-control-solid\\\" data-cy=\\\"nameInput\\\" type=\\\"text\\\" placeholder=\\\"Enter new organization name\\\" aria-describedby=\\\"nameHelp\\\" formControlName=\\\"name\\\" [class.is-valid]=\\\"nameControlValid\\\" [class.is-invalid]=\\\"nameControlInvalid\\\" />\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='nameControl.hasError(\\\"required\\\")'>Name required</div>\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='nameControl.hasError(\\\"name\\\")'>Name is not available</div>\\n                            </div>\\n                            <div class=\\\"form-group mb-0\\\"><button class=\\\"btn btn-block btn-primary\\\" data-cy=\\\"organizationNewButton\\\" type=\\\"submit\\\" [disabled]=\\\"organizationNewForm.invalid\\\">Create Organization</button></div>\\n                        </form>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div></sb-layout-auth\\n>\\n\"","export default \"<sb-layout-auth\\n    ><div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-center\\\">\\n            <div class=\\\"col-xl-5 col-lg-6 col-md-8 col-sm-11\\\">\\n                <div class=\\\"card border-0 shadow-lg mt-5\\\">\\n                    <div class=\\\"card-body p-5 text-center\\\">\\n                        <div class=\\\"sb-icons-org-join\\\"><i-feather class=\\\"sb-icon-user\\\" name=\\\"user\\\"></i-feather><fa-icon class=\\\"sb-icon-arrow\\\" [icon]='[\\\"fas\\\", \\\"long-arrow-alt-right\\\"]'></fa-icon><i-feather class=\\\"sb-icon-users\\\" name=\\\"users\\\"></i-feather></div>\\n                        <div class=\\\"h3 text-secondary font-weight-300 mb-0\\\">Join an Organization</div>\\n                    </div>\\n                    <hr class=\\\"m-0\\\" />\\n                    <div class=\\\"card-body p-5\\\">\\n                        <form [formGroup]=\\\"organizationJoinFormCode\\\" (ngSubmit)=\\\"onSubmitCode()\\\">\\n                            <h5 class=\\\"font-weight-500 mb-3\\\">Have an access code?</h5>\\n                            <div class=\\\"form-group\\\">\\n                                <input class=\\\"form-control form-control-solid py-4\\\" id=\\\"codeInput\\\" data-cy=\\\"codeInput\\\" type=\\\"text\\\" placeholder=\\\"Enter access code\\\" aria-label=\\\"Access Code\\\" formControlName=\\\"code\\\" [class.is-valid]=\\\"codeControlValid\\\" [class.is-invalid]=\\\"codeControlInvalid\\\" />\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='codeControl.hasError(\\\"required\\\")'>Code required</div>\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='codeControl.hasError(\\\"code\\\")'>Code not recognized</div>\\n                            </div>\\n                            <div class=\\\"form-group\\\"><button class=\\\"btn btn-block btn-secondary\\\" data-cy=\\\"accessCodeButton\\\" type=\\\"submit\\\" [disabled]=\\\"organizationJoinFormCode.invalid\\\">Request</button></div>\\n                        </form>\\n                    </div>\\n                    <div class=\\\"sb-org-or-divider\\\"><div class=\\\"sb-org-or\\\">or</div></div>\\n                    <div class=\\\"card-body p-5\\\">\\n                        <form [formGroup]=\\\"organizationJoinFormRequest\\\" (ngSubmit)=\\\"onSubmitRequest()\\\">\\n                            <h5 class=\\\"font-weight-500 mb-3\\\">Request access</h5>\\n                            <div class=\\\"form-group\\\">\\n                                <input class=\\\"form-control form-control-solid py-4\\\" id=\\\"joinNameInput\\\" data-cy=\\\"joinNameInput\\\" type=\\\"text\\\" placeholder=\\\"Existing organization name\\\" aria-label=\\\"Organization Name\\\" formControlName=\\\"name\\\" [class.is-valid]=\\\"nameControlValid\\\" [class.is-invalid]=\\\"nameControlInvalid\\\" />\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='nameControl.hasError(\\\"required\\\")'>Name required</div>\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='nameControl.hasError(\\\"name\\\")'>Organization not recognized</div>\\n                            </div>\\n                            <div class=\\\"form-group\\\"><button class=\\\"btn btn-block btn-secondary\\\" data-cy=\\\"joinOrgNamedButton\\\" type=\\\"submit\\\" [disabled]=\\\"organizationJoinFormRequest.invalid\\\">Join</button></div>\\n                        </form>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div></sb-layout-auth\\n><ng-template #confirmationModalAccessCode let-modal\\n    ><div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title\\\">Access Code</h5>\\n        <button class=\\\"close\\\" type=\\\"button\\\" aria-label=\\\"Close\\\" (click)='modal.dismiss(\\\"Cross click\\\")'><span aria-hidden=\\\"true\\\">×</span></button>\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n        Wired up and ready to go. Just add a backend. <br /><br />\\n        code: <code>{{organizationJoinFormCode.value.code}}</code>\\n    </div>\\n    <div class=\\\"modal-footer\\\"><button class=\\\"btn btn-secondary\\\" type=\\\"button\\\" (click)=\\\"modal.close()\\\">Close</button><button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)='modal.close(\\\"DASHBOARD\\\")'>Proceed back to Dashboard</button></div></ng-template\\n><ng-template #confirmationModalRequest let-modal\\n    ><div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title\\\">Request Access</h5>\\n        <button class=\\\"close\\\" type=\\\"button\\\" aria-label=\\\"Close\\\" (click)='modal.dismiss(\\\"Cross click\\\")'><span aria-hidden=\\\"true\\\">×</span></button>\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n        Wired up and ready to go. Just add a backend. <br /><br />\\n        name: <code>{{organizationJoinFormRequest.value.name}}</code>\\n    </div>\\n    <div class=\\\"modal-footer\\\"><button class=\\\"btn btn-secondary\\\" type=\\\"button\\\" (click)=\\\"modal.close()\\\">Close</button><button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)='modal.close(\\\"DASHBOARD\\\")'>Proceed back to Dashboard</button></div></ng-template\\n>\\n\"","export default \"<sb-layout-auth\\n    ><div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-center\\\">\\n            <!-- Register Form-->\\n            <div class=\\\"col-xl-8 col-lg-9\\\">\\n                <div class=\\\"card my-5\\\">\\n                    <div class=\\\"card-body p-5 text-center\\\">\\n                        <div class=\\\"h3 font-weight-light mb-3\\\">Create an Account</div>\\n                        <div class=\\\"small text-muted mb-2\\\">Sign in using...</div>\\n                        <button class=\\\"btn sb-btn-icon sb-btn-facebook mx-1\\\"><fa-icon [icon]='[\\\"fab\\\", \\\"facebook-f\\\"]'></fa-icon></button><button class=\\\"btn sb-btn-icon sb-btn-github mx-1\\\"><fa-icon [icon]='[\\\"fab\\\", \\\"github\\\"]'></fa-icon></button><button class=\\\"btn sb-btn-icon sb-btn-google mx-1\\\"><fa-icon [icon]='[\\\"fab\\\", \\\"google\\\"]'></fa-icon></button><button class=\\\"btn sb-btn-icon sb-btn-twitter mx-1\\\"><fa-icon [icon]='[\\\"fab\\\", \\\"twitter\\\"]'></fa-icon></button>\\n                    </div>\\n                    <hr class=\\\"my-0\\\" />\\n                    <div class=\\\"card-body p-5\\\">\\n                        <div class=\\\"text-center small text-muted mb-4\\\">...or enter your information below.</div>\\n                        <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                            <div class=\\\"form-row\\\">\\n                                <div class=\\\"col-md-6\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"text-gray-600 small\\\" for=\\\"inputFirstName\\\">First name</label><input class=\\\"form-control sb-form-control-solid py-4\\\" id=\\\"inputFirstName\\\" data-cy=\\\"firstNameInput\\\" type=\\\"text\\\" formControlName=\\\"firstName\\\" [class.is-valid]=\\\"firstNameControlValid\\\" [class.is-invalid]=\\\"firstNameControlInvalid\\\" />\\n                                        <div class=\\\"valid-feedback\\\">Looks good!</div>\\n                                        <div class=\\\"invalid-feedback\\\" *ngIf='firstNameControl.hasError(\\\"required\\\")'>First name required.</div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"col-md-6\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"text-gray-600 small\\\" for=\\\"inputLastName\\\">Last name </label><input class=\\\"form-control sb-form-control-solid py-4\\\" id=\\\"inputLastName\\\" data-cy=\\\"lastNameInput\\\" type=\\\"text\\\" formControlName=\\\"lastName\\\" [class.is-valid]=\\\"lastNameControlValid\\\" [class.is-invalid]=\\\"lastNameControlInvalid\\\" />\\n                                        <div class=\\\"valid-feedback\\\">Looks good!</div>\\n                                        <div class=\\\"invalid-feedback\\\" *ngIf='lastNameControl.hasError(\\\"required\\\")'>Last name required.</div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"form-group\\\">\\n                                <label class=\\\"text-gray-600 small\\\" for=\\\"inputEmailAddress\\\">Email address</label><input class=\\\"form-control sb-form-control-solid py-4\\\" id=\\\"inputEmailAddress\\\" data-cy=\\\"emailInput\\\" type=\\\"email\\\" aria-describedby=\\\"emailHelp\\\" formControlName=\\\"email\\\" [class.is-valid]=\\\"emailControlValid\\\" [class.is-invalid]=\\\"emailControlInvalid\\\" />\\n                                <div class=\\\"valid-feedback\\\">Looks good!</div>\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='emailControl.hasError(\\\"required\\\")'>Email required.</div>\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='emailControl.hasError(\\\"email\\\")'>Email is not valid.</div>\\n                            </div>\\n                            <div class=\\\"form-row\\\">\\n                                <div class=\\\"col-md-6\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"text-gray-600 small\\\" for=\\\"inputPassword\\\">Password</label><input class=\\\"form-control sb-form-control-solid py-4\\\" id=\\\"inputPassword\\\" data-cy=\\\"passwordInput\\\" type=\\\"password\\\" formControlName=\\\"password\\\" [class.is-valid]=\\\"passwordControlValid\\\" [class.is-invalid]=\\\"passwordControlInvalid\\\" />\\n                                        <div class=\\\"valid-feedback\\\">Looks good!</div>\\n                                        <div class=\\\"invalid-feedback\\\" *ngIf='passwordControl.hasError(\\\"required\\\")'>Password required.</div>\\n                                        <div class=\\\"invalid-feedback\\\" *ngIf='passwordControl.hasError(\\\"minlength\\\")'>Password must be at least 8 characters.</div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"col-md-6\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"text-gray-600 small\\\" for=\\\"inputConfirmPassword\\\">Confirm Password</label><input class=\\\"form-control sb-form-control-solid py-4\\\" id=\\\"inputConfirmPassword\\\" data-cy=\\\"confirmPasswordInput\\\" type=\\\"password\\\" formControlName=\\\"confirmPassword\\\" [class.is-valid]=\\\"confirmPasswordControlValid\\\" [class.is-invalid]=\\\"confirmPasswordControlInvalid\\\" />\\n                                        <div class=\\\"valid-feedback\\\">Looks good!</div>\\n                                        <div class=\\\"invalid-feedback\\\" *ngIf='confirmPasswordControl.hasError(\\\"required\\\")'>Confirm Password required.</div>\\n                                        <div class=\\\"invalid-feedback\\\" *ngIf='registerForm.hasError(\\\"passwordMismatch\\\")'>Passwords do not match.</div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"form-group d-flex align-items-center justify-content-between\\\">\\n                                <div class=\\\"custom-control sb-custom-control-solid custom-checkbox\\\">\\n                                    <input class=\\\"custom-control-input small\\\" id=\\\"termsAndConditionsInput\\\" data-cy=\\\"termsAndConditionsInput\\\" type=\\\"checkbox\\\" formControlName=\\\"termsAndConditions\\\" [class.is-valid]=\\\"termsAndConditionsControlValid\\\" [class.is-invalid]=\\\"termsAndConditionsControlInvalid\\\" /><label class=\\\"custom-control-label\\\" for=\\\"termsAndConditionsInput\\\">I accept the terms & conditions</label>\\n                                    <div class=\\\"invalid-feedback\\\" *ngIf='termsAndConditionsControl.hasError(\\\"required\\\")'>You must accept the terms & conditions.</div>\\n                                </div>\\n                                <button class=\\\"btn btn-primary\\\" data-cy=\\\"registerButton\\\" type=\\\"submit\\\" [disabled]=\\\"registerForm.invalid\\\">Create Account</button>\\n                            </div>\\n                        </form>\\n                    </div>\\n                    <hr class=\\\"my-0\\\" />\\n                    <div class=\\\"card-body px-5 py-4\\\">\\n                        <div class=\\\"small text-center\\\">Have an account? <a routerLink=\\\"/auth/login-social\\\">Sign in!</a></div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div></sb-layout-auth\\n><ng-template #confirmationModal let-modal\\n    ><div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title\\\">Create Account Form Data</h5>\\n        <button class=\\\"close\\\" type=\\\"button\\\" aria-label=\\\"Close\\\" (click)='modal.dismiss(\\\"Cross click\\\")'><span aria-hidden=\\\"true\\\">×</span></button>\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n        Wired up and ready to go. Just add a backend. <br /><br />\\n        firstName: <code>{{registerForm.value.firstName}}</code>\\n        <br />\\n        lastName: <code>{{registerForm.value.lastName}}</code>\\n        <br />\\n        email: <code>{{registerForm.value.email}}</code>\\n        <br />\\n        password: <code>{{registerForm.value.password}}</code>\\n        <br />\\n        termsAndConditions: <code>{{registerForm.value.termsAndConditions}}</code>\\n    </div>\\n    <div class=\\\"modal-footer\\\"><button class=\\\"btn btn-secondary\\\" type=\\\"button\\\" (click)=\\\"modal.close()\\\">Close</button><button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)='modal.close(\\\"DASHBOARD\\\")'>Proceed back to Dashboard</button></div></ng-template\\n>\\n\"","export default \"<sb-layout-auth\\n    ><div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-center\\\">\\n            <div class=\\\"col-lg-7\\\">\\n                <div class=\\\"card shadow-lg border-0 rounded-lg mt-5\\\">\\n                    <div class=\\\"card-header justify-content-center\\\"><h3 class=\\\"font-weight-light my-4\\\">Create Account</h3></div>\\n                    <div class=\\\"card-body\\\">\\n                        <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                            <div class=\\\"form-row\\\">\\n                                <div class=\\\"col-md-6\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"small mb-1\\\" for=\\\"inputFirstName\\\">First Name</label><input class=\\\"form-control py-4\\\" id=\\\"inputFirstName\\\" data-cy=\\\"firstNameInput\\\" type=\\\"text\\\" placeholder=\\\"Enter first name\\\" formControlName=\\\"firstName\\\" [class.is-valid]=\\\"firstNameControlValid\\\" [class.is-invalid]=\\\"firstNameControlInvalid\\\" />\\n                                        <div class=\\\"valid-feedback\\\">Looks good!</div>\\n                                        <div class=\\\"invalid-feedback\\\" *ngIf='firstNameControl.hasError(\\\"required\\\")'>First name required.</div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"col-md-6\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"small mb-1\\\" for=\\\"inputLastName\\\">Last Name</label><input class=\\\"form-control py-4\\\" id=\\\"inputLastName\\\" data-cy=\\\"lastNameInput\\\" type=\\\"text\\\" placeholder=\\\"Enter last name\\\" formControlName=\\\"lastName\\\" [class.is-valid]=\\\"lastNameControlValid\\\" [class.is-invalid]=\\\"lastNameControlInvalid\\\" />\\n                                        <div class=\\\"valid-feedback\\\">Looks good!</div>\\n                                        <div class=\\\"invalid-feedback\\\" *ngIf='lastNameControl.hasError(\\\"required\\\")'>Last name required.</div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"form-group\\\">\\n                                <label class=\\\"small mb-1\\\" for=\\\"inputEmailAddress\\\">Email</label><input class=\\\"form-control py-4\\\" id=\\\"inputEmailAddress\\\" data-cy=\\\"emailInput\\\" type=\\\"email\\\" placeholder=\\\"Enter email address\\\" aria-describedby=\\\"emailHelp\\\" formControlName=\\\"email\\\" [class.is-valid]=\\\"emailControlValid\\\" [class.is-invalid]=\\\"emailControlInvalid\\\" />\\n                                <div class=\\\"valid-feedback\\\">Looks good!</div>\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='emailControl.hasError(\\\"required\\\")'>Email required.</div>\\n                                <div class=\\\"invalid-feedback\\\" *ngIf='emailControl.hasError(\\\"email\\\")'>Email is not valid.</div>\\n                            </div>\\n                            <div class=\\\"form-row\\\">\\n                                <div class=\\\"col-md-6\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"small mb-1\\\" for=\\\"inputPassword\\\">Password</label><input class=\\\"form-control py-4\\\" id=\\\"inputPassword\\\" data-cy=\\\"passwordInput\\\" type=\\\"password\\\" placeholder=\\\"Enter password\\\" formControlName=\\\"password\\\" [class.is-valid]=\\\"passwordControlValid\\\" [class.is-invalid]=\\\"passwordControlInvalid\\\" />\\n                                        <div class=\\\"valid-feedback\\\">Looks good!</div>\\n                                        <div class=\\\"invalid-feedback\\\" *ngIf='passwordControl.hasError(\\\"required\\\")'>Password required.</div>\\n                                        <div class=\\\"invalid-feedback\\\" *ngIf='passwordControl.hasError(\\\"minlength\\\")'>Password must be at least 8 characters.</div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"col-md-6\\\">\\n                                    <div class=\\\"form-group\\\">\\n                                        <label class=\\\"small mb-1\\\" for=\\\"inputConfirmPassword\\\">Confirm Password</label><input class=\\\"form-control py-4\\\" id=\\\"inputConfirmPassword\\\" data-cy=\\\"confirmPasswordInput\\\" type=\\\"password\\\" placeholder=\\\"Confirm password\\\" formControlName=\\\"confirmPassword\\\" [class.is-valid]=\\\"confirmPasswordControlValid\\\" [class.is-invalid]=\\\"confirmPasswordControlInvalid\\\" />\\n                                        <div class=\\\"valid-feedback\\\">Looks good!</div>\\n                                        <div class=\\\"invalid-feedback\\\" *ngIf='confirmPasswordControl.hasError(\\\"required\\\")'>Confirm Password required.</div>\\n                                        <div class=\\\"invalid-feedback\\\" *ngIf='registerForm.hasError(\\\"passwordMismatch\\\")'>Passwords do not match.</div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"form-group mt-4 mb-0\\\"><button class=\\\"btn btn-primary btn-block\\\" data-cy=\\\"registerButton\\\" type=\\\"submit\\\" [disabled]=\\\"registerForm.invalid\\\">Create Account</button></div>\\n                        </form>\\n                    </div>\\n                    <div class=\\\"card-footer text-center\\\">\\n                        <div class=\\\"small\\\"><a routerLink=\\\"/auth/login\\\">Have an account? Go to login</a></div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div></sb-layout-auth\\n><ng-template #confirmationModal let-modal\\n    ><div class=\\\"modal-header\\\">\\n        <h5 class=\\\"modal-title\\\">Create Account Form Data</h5>\\n        <button class=\\\"close\\\" type=\\\"button\\\" aria-label=\\\"Close\\\" (click)='modal.dismiss(\\\"Cross click\\\")'><span aria-hidden=\\\"true\\\">×</span></button>\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n        Wired up and ready to go. Just add a backend. <br /><br />\\n        firstName: <code>{{registerForm.value.firstName}}</code>\\n        <br />\\n        lastName: <code>{{registerForm.value.lastName}}</code>\\n        <br />\\n        email: <code>{{registerForm.value.email}}</code>\\n        <br />\\n        password: <code>{{registerForm.value.password}}</code>\\n    </div>\\n    <div class=\\\"modal-footer\\\"><button class=\\\"btn btn-secondary\\\" type=\\\"button\\\" (click)=\\\"modal.close()\\\">Close</button><button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)='modal.close(\\\"DASHBOARD\\\")'>Proceed back to Dashboard</button></div></ng-template\\n>\\n\"","/* tslint:disable: ordered-imports*/\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { SBRouteData } from '@modules/navigation/models';\r\n\r\n/* Module */\r\nimport { AuthModule } from './auth.module';\r\n\r\n/* Containers */\r\nimport * as authContainers from './containers';\r\n\r\n/* Guards */\r\nimport * as authGuards from './guards';\r\n\r\n/* Routes */\r\nexport const ROUTES: Routes = [\r\n    {\r\n        path: '',\r\n        pathMatch: 'full',\r\n        redirectTo: 'login',\r\n    },\r\n    {\r\n        path: 'login',\r\n        canActivate: [],\r\n        component: authContainers.LoginComponent,\r\n        data: {\r\n            title: 'Login - SB Admin Pro Angular',\r\n        } as SBRouteData,\r\n    },\r\n    {\r\n        path: 'register',\r\n        canActivate: [],\r\n        component: authContainers.RegisterComponent,\r\n        data: {\r\n            title: 'Register - SB Admin Pro Angular',\r\n        } as SBRouteData,\r\n    },\r\n    {\r\n        path: 'forgot-password',\r\n        canActivate: [],\r\n        component: authContainers.ForgotPasswordComponent,\r\n        data: {\r\n            title: 'Forgot Password - SB Admin Pro Angular',\r\n        } as SBRouteData,\r\n    },\r\n    {\r\n        path: 'login-social',\r\n        canActivate: [],\r\n        component: authContainers.LoginSocialComponent,\r\n        data: {\r\n            title: 'Login Social - SB Admin Pro Angular',\r\n        } as SBRouteData,\r\n    },\r\n    {\r\n        path: 'register-social',\r\n        canActivate: [],\r\n        component: authContainers.RegisterSocialComponent,\r\n        data: {\r\n            title: 'Register Social - SB Admin Pro Angular',\r\n        } as SBRouteData,\r\n    },\r\n    {\r\n        path: 'forgot-password-social',\r\n        canActivate: [],\r\n        component: authContainers.ForgotPasswordSocialComponent,\r\n        data: {\r\n            title: 'Forgot Password Social - SB Admin Pro Angular',\r\n        } as SBRouteData,\r\n    },\r\n    {\r\n        path: 'multi-tenant-select',\r\n        canActivate: [],\r\n        component: authContainers.MultiTenantSelectComponent,\r\n        data: {\r\n            title: 'Multi-Tenant Select - SB Admin Pro Angular',\r\n        } as SBRouteData,\r\n    },\r\n    {\r\n        path: 'multi-tenant-add-users',\r\n        canActivate: [],\r\n        component: authContainers.MultiTenantAddUsersComponent,\r\n        data: {\r\n            title: 'Multi-Tenant Add Users - SB Admin Pro Angular',\r\n        } as SBRouteData,\r\n    },\r\n    {\r\n        path: 'org-create',\r\n        canActivate: [],\r\n        component: authContainers.OrgCreateComponent,\r\n        data: {\r\n            title: 'Org Create - SB Admin Pro Angular',\r\n        } as SBRouteData,\r\n    },\r\n    {\r\n        path: 'org-join',\r\n        canActivate: [],\r\n        component: authContainers.OrgJoinComponent,\r\n        data: {\r\n            title: 'Org Join - SB Admin Pro Angular',\r\n        } as SBRouteData,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [AuthModule, RouterModule.forChild(ROUTES)],\r\n    exports: [RouterModule],\r\n})\r\nexport class AuthRoutingModule {}\r\n","/* tslint:disable: ordered-imports*/\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\n/* Modules */\r\nimport { AppCommonModule } from '@common/app-common.module';\r\nimport { NavigationModule } from '@modules/navigation/navigation.module';\r\n\r\n/* Components */\r\nimport * as authComponents from './components';\r\n\r\n/* Containers */\r\nimport * as authContainers from './containers';\r\n\r\n/* Guards */\r\nimport * as authGuards from './guards';\r\n\r\n/* Services */\r\nimport * as authServices from './services';\r\nimport { AuthInterceptorService } from './services/auth-interceptor.service';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        RouterModule,\r\n        ReactiveFormsModule,\r\n        FormsModule,\r\n        HttpClientModule,\r\n        AppCommonModule,\r\n        NavigationModule,\r\n    ],\r\n    providers: [\r\n        ...authServices.services,\r\n        ...authGuards.guards,\r\n        {\r\n            provide: HTTP_INTERCEPTORS,\r\n            useClass: AuthInterceptorService,\r\n            multi: true,\r\n        },\r\n    ],\r\n    declarations: [...authContainers.containers, ...authComponents.components],\r\n    exports: [...authContainers.containers, ...authComponents.components],\r\n})\r\nexport class AuthModule {}\r\n","export const components: any = [];\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvbW9kdWxlcy9hdXRoL2NvbnRhaW5lcnMvZm9yZ290LXBhc3N3b3JkLXNvY2lhbC9mb3Jnb3QtcGFzc3dvcmQtc29jaWFsLmNvbXBvbmVudC5zY3NzIn0= */\"","import { ChangeDetectionStrategy, Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n    selector: 'sbpro-forgot-password-social',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    templateUrl: './forgot-password-social.component.html',\r\n    styleUrls: ['forgot-password-social.component.scss'],\r\n})\r\nexport class ForgotPasswordSocialComponent implements OnInit {\r\n    @ViewChild('confirmationModal') confirmationModal!: TemplateRef<unknown>;\r\n\r\n    forgotPasswordForm = this.fb.group({\r\n        email: ['', [Validators.required, Validators.email]],\r\n    });\r\n\r\n    constructor(private fb: FormBuilder, private modalService: NgbModal, private router: Router) {}\r\n    ngOnInit() {}\r\n\r\n    onSubmit() {\r\n        if (this.forgotPasswordForm.status === 'VALID') {\r\n            this.modalService.open(this.confirmationModal).result.then(\r\n                result => {\r\n                    if (result === 'DASHBOARD') {\r\n                        this.router.navigate(['/dashboard']);\r\n                    }\r\n                },\r\n                reason => {}\r\n            );\r\n        }\r\n\r\n        for (const key in this.forgotPasswordForm.controls) {\r\n            const control = this.forgotPasswordForm.controls[key];\r\n            control.markAllAsTouched();\r\n        }\r\n    }\r\n\r\n    /* Accessor Methods */\r\n\r\n    get emailControl() {\r\n        return this.forgotPasswordForm.get('email') as FormControl;\r\n    }\r\n\r\n    get emailControlValid() {\r\n        return this.emailControl.touched && !this.emailControlInvalid;\r\n    }\r\n\r\n    get emailControlInvalid() {\r\n        return (\r\n            this.emailControl.touched &&\r\n            (this.emailControl.hasError('required') || this.emailControl.hasError('email'))\r\n        );\r\n    }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvbW9kdWxlcy9hdXRoL2NvbnRhaW5lcnMvZm9yZ290LXBhc3N3b3JkL2ZvcmdvdC1wYXNzd29yZC5jb21wb25lbnQuc2NzcyJ9 */\"","import { ChangeDetectionStrategy, Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n    selector: 'sb-forgot-password',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    templateUrl: './forgot-password.component.html',\r\n    styleUrls: ['forgot-password.component.scss'],\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n    @ViewChild('confirmationModal') confirmationModal!: TemplateRef<unknown>;\r\n\r\n    forgotPasswordForm = this.fb.group({\r\n        email: ['', [Validators.required, Validators.email]],\r\n    });\r\n\r\n    constructor(private fb: FormBuilder, private modalService: NgbModal, private router: Router) {}\r\n    ngOnInit() {}\r\n\r\n    onSubmit() {\r\n        if (this.forgotPasswordForm.status === 'VALID') {\r\n            this.modalService.open(this.confirmationModal).result.then(\r\n                result => {\r\n                    if (result === 'DASHBOARD') {\r\n                        this.router.navigate(['/dashboard']);\r\n                    }\r\n                },\r\n                reason => {}\r\n            );\r\n        }\r\n\r\n        for (const key in this.forgotPasswordForm.controls) {\r\n            const control = this.forgotPasswordForm.controls[key];\r\n            control.markAllAsTouched();\r\n        }\r\n    }\r\n\r\n    /* Accessor Methods */\r\n\r\n    get emailControl() {\r\n        return this.forgotPasswordForm.get('email') as FormControl;\r\n    }\r\n\r\n    get emailControlValid() {\r\n        return this.emailControl.touched && !this.emailControlInvalid;\r\n    }\r\n\r\n    get emailControlInvalid() {\r\n        return (\r\n            this.emailControl.touched &&\r\n            (this.emailControl.hasError('required') || this.emailControl.hasError('email'))\r\n        );\r\n    }\r\n}\r\n","import { ForgotPasswordSocialComponent } from './forgot-password-social/forgot-password-social.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { LoginSocialComponent } from './login-social/login-social.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { MultiTenantAddUsersComponent } from './multi-tenant-add-users/multi-tenant-add-users.component';\r\nimport { MultiTenantSelectComponent } from './multi-tenant-select/multi-tenant-select.component';\r\nimport { OrgCreateComponent } from './org-create/org-create.component';\r\nimport { OrgJoinComponent } from './org-join/org-join.component';\r\nimport { RegisterSocialComponent } from './register-social/register-social.component';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\nexport const containers = [\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    ForgotPasswordComponent,\r\n    LoginSocialComponent,\r\n    RegisterSocialComponent,\r\n    ForgotPasswordSocialComponent,\r\n    MultiTenantSelectComponent,\r\n    OrgCreateComponent,\r\n    OrgJoinComponent,\r\n    MultiTenantAddUsersComponent,\r\n];\r\n\r\nexport * from './login/login.component';\r\nexport * from './register/register.component';\r\nexport * from './forgot-password/forgot-password.component';\r\nexport * from './login-social/login-social.component';\r\nexport * from './register-social/register-social.component';\r\nexport * from './forgot-password-social/forgot-password-social.component';\r\nexport * from './multi-tenant-select/multi-tenant-select.component';\r\nexport * from './org-create/org-create.component';\r\nexport * from './org-join/org-join.component';\r\nexport * from './multi-tenant-add-users/multi-tenant-add-users.component';\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvbW9kdWxlcy9hdXRoL2NvbnRhaW5lcnMvbG9naW4tc29jaWFsL2xvZ2luLXNvY2lhbC5jb21wb25lbnQuc2NzcyJ9 */\"","import { ChangeDetectionStrategy, Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n    selector: 'sbpro-login-social',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    templateUrl: './login-social.component.html',\r\n    styleUrls: ['login-social.component.scss'],\r\n})\r\nexport class LoginSocialComponent implements OnInit {\r\n    @ViewChild('confirmationModal') confirmationModal!: TemplateRef<unknown>;\r\n\r\n    loginForm = this.fb.group({\r\n        email: ['', [Validators.required, Validators.email]],\r\n        password: ['', [Validators.required, Validators.minLength(8)]],\r\n        checkbox: [false],\r\n    });\r\n\r\n    constructor(private fb: FormBuilder, private modalService: NgbModal, private router: Router) {}\r\n    ngOnInit() {}\r\n\r\n    onSubmit() {\r\n        if (this.loginForm.status === 'VALID') {\r\n            this.modalService.open(this.confirmationModal).result.then(\r\n                result => {\r\n                    if (result === 'DASHBOARD') {\r\n                        this.router.navigate(['/dashboard']);\r\n                    }\r\n                },\r\n                reason => {}\r\n            );\r\n        }\r\n\r\n        for (const key in this.loginForm.controls) {\r\n            const control = this.loginForm.controls[key];\r\n            control.markAllAsTouched();\r\n        }\r\n    }\r\n\r\n    /* Accessor Methods */\r\n\r\n    get emailControl() {\r\n        return this.loginForm.get('email') as FormControl;\r\n    }\r\n\r\n    get emailControlValid() {\r\n        return this.emailControl.touched && !this.emailControlInvalid;\r\n    }\r\n\r\n    get emailControlInvalid() {\r\n        return (\r\n            this.emailControl.touched &&\r\n            (this.emailControl.hasError('required') || this.emailControl.hasError('email'))\r\n        );\r\n    }\r\n\r\n    get passwordControl() {\r\n        return this.loginForm.get('password') as FormControl;\r\n    }\r\n\r\n    get passwordControlValid() {\r\n        return this.passwordControl.touched && !this.passwordControlInvalid;\r\n    }\r\n\r\n    get passwordControlInvalid() {\r\n        return (\r\n            this.passwordControl.touched &&\r\n            (this.passwordControl.hasError('required') ||\r\n                this.passwordControl.hasError('minlength'))\r\n        );\r\n    }\r\n}\r\n","export default \".pslogo {\\n  max-width: -webkit-fill-available;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL2F1dGgvY29udGFpbmVycy9sb2dpbi9DOlxcVXNlcnNcXEhhYmliTW9rbmlcXERvY3VtZW50c1xcR2l0SHViXFxwcy1ibXMvc3JjXFxtb2R1bGVzXFxhdXRoXFxjb250YWluZXJzXFxsb2dpblxcbG9naW4uY29tcG9uZW50LnNjc3MiLCJzcmMvbW9kdWxlcy9hdXRoL2NvbnRhaW5lcnMvbG9naW4vbG9naW4uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFDSSxpQ0FBQTtBQ0FKIiwiZmlsZSI6InNyYy9tb2R1bGVzL2F1dGgvY29udGFpbmVycy9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIkBpbXBvcnQgJ3N0eWxlcy92YXJpYWJsZXMuc2Nzcyc7XHJcbi5wc2xvZ297XHJcbiAgICBtYXgtd2lkdGg6IC13ZWJraXQtZmlsbC1hdmFpbGFibGU7XHJcbn0iLCIucHNsb2dvIHtcbiAgbWF4LXdpZHRoOiAtd2Via2l0LWZpbGwtYXZhaWxhYmxlO1xufSJdfQ== */\"","import { ChangeDetectionStrategy, Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, NgForm, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthResponseData, AuthService } from '@modules/auth/services';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'sb-login',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['login.component.scss'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n    error = '';\r\n    token = '';\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private modalService: NgbModal,\r\n        private router: Router,\r\n        private authService: AuthService\r\n    ) {}\r\n\r\n    /* Accessor Methods */\r\n\r\n    get emailControl() {\r\n        return this.loginForm.get('email') as FormControl;\r\n    }\r\n\r\n    get emailControlValid() {\r\n        return this.emailControl.touched && !this.emailControlInvalid;\r\n    }\r\n\r\n    get emailControlInvalid() {\r\n        return (\r\n            this.emailControl.touched &&\r\n            (this.emailControl.hasError('required') || this.emailControl.hasError('email'))\r\n        );\r\n    }\r\n\r\n    get passwordControl() {\r\n        return this.loginForm.get('password') as FormControl;\r\n    }\r\n\r\n    get passwordControlValid() {\r\n        return this.passwordControl.touched && !this.passwordControlInvalid;\r\n    }\r\n\r\n    get passwordControlInvalid() {\r\n        return (\r\n            this.passwordControl.touched &&\r\n            (this.passwordControl.hasError('required') ||\r\n                this.passwordControl.hasError('minlength'))\r\n        );\r\n    }\r\n    // isLoginMode = true;\r\n\r\n    @ViewChild('confirmationModal') confirmationModal!: TemplateRef<unknown>;\r\n    @ViewChild('errorModal') errorModal!: TemplateRef<unknown>;\r\n    loginForm = this.fb.group({\r\n        email: ['', [Validators.required, Validators.email]],\r\n        password: ['', [Validators.required, Validators.minLength(8)]],\r\n        checkbox: [false],\r\n    });\r\n\r\n    // onSwitchMode() {\r\n    //     this.isLoginMode = !this.isLoginMode;\r\n    // }\r\n    ngOnInit() {}\r\n\r\n    onSubmit() {\r\n        const email = this.loginForm.value.email;\r\n        const password = this.loginForm.value.password;\r\n        let authObs: Observable<AuthResponseData>;\r\n\r\n        if (this.loginForm.status === 'VALID') {\r\n            // console.log(email, password);\r\n            authObs = this.authService.login(email, password);\r\n        } else {\r\n            alert('This is alert box!');\r\n            console.log(email, password);\r\n        }\r\n        authObs.subscribe(\r\n            resData => {\r\n                console.log('restdata ', resData);\r\n                this.authService.isLogged.next(true);\r\n                this.authService.isLogged2 = true;\r\n                console.log(this.authService.isLogged2);\r\n                localStorage.setItem('access-token', resData.idToken);\r\n                this.router.navigate(['/talents/list']);\r\n                // console.log(localStorage.getItem('access-token'));\r\n            },\r\n            errorMessage => {\r\n                this.authService.isLogged.next(false);\r\n                console.log(errorMessage);\r\n                this.error = errorMessage;\r\n                this.modalService.open(this.errorModal).result.then(\r\n                    result => {\r\n                        if (result === 'ERROR') {\r\n                            this.router.navigate(['/auth/login']);\r\n                        }\r\n                    },\r\n                    reason => {}\r\n                );\r\n            }\r\n        );\r\n        for (const key in this.loginForm.controls) {\r\n            const control = this.loginForm.controls[key];\r\n            control.markAllAsTouched();\r\n        }\r\n    }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvbW9kdWxlcy9hdXRoL2NvbnRhaW5lcnMvbXVsdGktdGVuYW50LWFkZC11c2Vycy9tdWx0aS10ZW5hbnQtYWRkLXVzZXJzLmNvbXBvbmVudC5zY3NzIn0= */\"","import { ChangeDetectionStrategy, Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\r\nimport { FormArray, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n    selector: 'sbpro-multi-tenant-add-users',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    templateUrl: './multi-tenant-add-users.component.html',\r\n    styleUrls: ['multi-tenant-add-users.component.scss'],\r\n})\r\nexport class MultiTenantAddUsersComponent implements OnInit {\r\n    @ViewChild('confirmationModal') confirmationModal!: TemplateRef<unknown>;\r\n\r\n    addUsersForm = this.fb.group({\r\n        emails: this.fb.array([this.fb.control('', [Validators.required, Validators.email])]),\r\n    });\r\n\r\n    constructor(private fb: FormBuilder, private modalService: NgbModal, private router: Router) {}\r\n    ngOnInit() {}\r\n\r\n    onSubmit() {\r\n        if (this.addUsersForm.status === 'VALID') {\r\n            this.modalService.open(this.confirmationModal).result.then(\r\n                result => {\r\n                    if (result === 'DASHBOARD') {\r\n                        this.router.navigate(['/dashboard']);\r\n                    }\r\n                },\r\n                reason => {}\r\n            );\r\n        }\r\n\r\n        for (const key in this.addUsersForm.controls) {\r\n            const control = this.addUsersForm.controls[key];\r\n            control.markAllAsTouched();\r\n        }\r\n    }\r\n\r\n    addAnother() {\r\n        this.emails.push(this.fb.control('', [Validators.required, Validators.email]));\r\n    }\r\n\r\n    /* Accessor Methods */\r\n\r\n    get emails() {\r\n        return this.addUsersForm.get('emails') as FormArray;\r\n    }\r\n\r\n    emailControlValid(index: number): boolean {\r\n        return this.emails.controls[index].touched && !this.emailControlInvalid(index);\r\n    }\r\n    emailControlInvalid(index: number) {\r\n        return (\r\n            this.emails.controls[index].touched &&\r\n            (this.emails.controls[index].hasError('required') ||\r\n                this.emails.controls[index].hasError('email'))\r\n        );\r\n    }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvbW9kdWxlcy9hdXRoL2NvbnRhaW5lcnMvbXVsdGktdGVuYW50LXNlbGVjdC9tdWx0aS10ZW5hbnQtc2VsZWN0LmNvbXBvbmVudC5zY3NzIn0= */\"","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'sbpro-multi-tenant-select',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    templateUrl: './multi-tenant-select.component.html',\r\n    styleUrls: ['multi-tenant-select.component.scss'],\r\n})\r\nexport class MultiTenantSelectComponent implements OnInit {\r\n    constructor() {}\r\n    ngOnInit() {}\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvbW9kdWxlcy9hdXRoL2NvbnRhaW5lcnMvb3JnLWNyZWF0ZS9vcmctY3JlYXRlLmNvbXBvbmVudC5zY3NzIn0= */\"","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'sbpro-org-create',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    templateUrl: './org-create.component.html',\r\n    styleUrls: ['org-create.component.scss'],\r\n})\r\nexport class OrgCreateComponent implements OnInit {\r\n    organizationNewForm = this.fb.group({\r\n        name: ['', [Validators.required]],\r\n    });\r\n\r\n    constructor(private fb: FormBuilder, private router: Router) {}\r\n    ngOnInit() {}\r\n\r\n    onSubmit() {\r\n        if (this.organizationNewForm.status === 'VALID') {\r\n            this.router.navigate(['/auth/multi-tenant-add-users']);\r\n        }\r\n\r\n        for (const key in this.organizationNewForm.controls) {\r\n            const control = this.organizationNewForm.controls[key];\r\n            control.markAllAsTouched();\r\n        }\r\n    }\r\n\r\n    /* Accessor Methods */\r\n\r\n    get nameControl() {\r\n        return this.organizationNewForm.get('name') as FormControl;\r\n    }\r\n\r\n    get nameControlValid() {\r\n        return this.nameControl.touched && !this.nameControlInvalid;\r\n    }\r\n\r\n    get nameControlInvalid() {\r\n        return this.nameControl.touched && this.nameControl.hasError('required');\r\n    }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvbW9kdWxlcy9hdXRoL2NvbnRhaW5lcnMvb3JnLWpvaW4vb3JnLWpvaW4uY29tcG9uZW50LnNjc3MifQ== */\"","import { ChangeDetectionStrategy, Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n    selector: 'sbpro-org-join',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    templateUrl: './org-join.component.html',\r\n    styleUrls: ['org-join.component.scss'],\r\n})\r\nexport class OrgJoinComponent implements OnInit {\r\n    @ViewChild('confirmationModalAccessCode')\r\n    confirmationModalAccessCode!: TemplateRef<unknown>;\r\n    @ViewChild('confirmationModalRequest')\r\n    confirmationModalRequest!: TemplateRef<unknown>;\r\n\r\n    organizationJoinFormCode = this.fb.group({\r\n        code: ['', [Validators.required]],\r\n    });\r\n    organizationJoinFormRequest = this.fb.group({\r\n        name: ['', [Validators.required]],\r\n    });\r\n\r\n    constructor(private fb: FormBuilder, private modalService: NgbModal, private router: Router) {}\r\n    ngOnInit() {}\r\n\r\n    _reset() {\r\n        this.organizationJoinFormCode.reset();\r\n        this.organizationJoinFormRequest.reset();\r\n    }\r\n\r\n    onSubmitCode() {\r\n        if (this.organizationJoinFormCode.status === 'VALID') {\r\n            this.modalService.open(this.confirmationModalAccessCode).result.then(\r\n                result => {\r\n                    if (result === 'DASHBOARD') {\r\n                        return this.router.navigate(['/dashboard']);\r\n                    }\r\n                    this._reset();\r\n                    return true;\r\n                },\r\n                reason => {}\r\n            );\r\n        }\r\n        for (const key in this.organizationJoinFormCode.controls) {\r\n            const control = this.organizationJoinFormCode.controls[key];\r\n            control.markAllAsTouched();\r\n        }\r\n    }\r\n\r\n    onSubmitRequest() {\r\n        if (this.organizationJoinFormRequest.status === 'VALID') {\r\n            this.modalService.open(this.confirmationModalRequest).result.then(\r\n                result => {\r\n                    if (result === 'DASHBOARD') {\r\n                        return this.router.navigate(['/dashboard']);\r\n                    }\r\n                    this._reset();\r\n                    return true;\r\n                },\r\n                reason => {}\r\n            );\r\n        }\r\n        for (const key in this.organizationJoinFormRequest.controls) {\r\n            const control = this.organizationJoinFormRequest.controls[key];\r\n            control.markAllAsTouched();\r\n        }\r\n    }\r\n\r\n    /* Accessor Methods */\r\n\r\n    get codeControl() {\r\n        return this.organizationJoinFormCode.get('code') as FormControl;\r\n    }\r\n\r\n    get codeControlValid() {\r\n        return this.codeControl.touched && !this.codeControlInvalid;\r\n    }\r\n\r\n    get codeControlInvalid() {\r\n        return this.codeControl.touched && this.codeControl.hasError('required');\r\n    }\r\n\r\n    get nameControl() {\r\n        return this.organizationJoinFormRequest.get('name') as FormControl;\r\n    }\r\n\r\n    get nameControlValid() {\r\n        return this.nameControl.touched && !this.nameControlInvalid;\r\n    }\r\n\r\n    get nameControlInvalid() {\r\n        return this.nameControl.touched && this.nameControl.hasError('required');\r\n    }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvbW9kdWxlcy9hdXRoL2NvbnRhaW5lcnMvcmVnaXN0ZXItc29jaWFsL3JlZ2lzdGVyLXNvY2lhbC5jb21wb25lbnQuc2NzcyJ9 */\"","import { ChangeDetectionStrategy, Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n    selector: 'sbpro-register-social',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    templateUrl: './register-social.component.html',\r\n    styleUrls: ['register-social.component.scss'],\r\n})\r\nexport class RegisterSocialComponent implements OnInit {\r\n    @ViewChild('confirmationModal') confirmationModal!: TemplateRef<unknown>;\r\n\r\n    registerForm = this.fb.group(\r\n        {\r\n            firstName: ['', [Validators.required]],\r\n            lastName: ['', [Validators.required]],\r\n            email: ['', [Validators.required, Validators.email]],\r\n            password: ['', [Validators.required, Validators.minLength(8)]],\r\n            confirmPassword: ['', [Validators.required]],\r\n            termsAndConditions: [false, [Validators.requiredTrue]],\r\n        },\r\n        { validator: this._checkPasswords }\r\n    );\r\n\r\n    constructor(private fb: FormBuilder, private modalService: NgbModal, private router: Router) {}\r\n    ngOnInit() {}\r\n\r\n    onSubmit() {\r\n        if (this.registerForm.status === 'VALID') {\r\n            this.modalService.open(this.confirmationModal).result.then(\r\n                result => {\r\n                    if (result === 'DASHBOARD') {\r\n                        this.router.navigate(['/dashboard']);\r\n                    }\r\n                },\r\n                reason => {}\r\n            );\r\n        }\r\n        for (const key in this.registerForm.controls) {\r\n            const control = this.registerForm.controls[key];\r\n            control.markAllAsTouched();\r\n        }\r\n    }\r\n\r\n    _checkPasswords(group: FormGroup) {\r\n        const pass = group.controls.password.value;\r\n        const confirmPass = group.controls.confirmPassword.value;\r\n\r\n        return pass === confirmPass ? null : { passwordMismatch: true };\r\n    }\r\n\r\n    /* Accessor Methods */\r\n\r\n    get firstNameControl() {\r\n        return this.registerForm.get('firstName') as FormControl;\r\n    }\r\n\r\n    get firstNameControlValid() {\r\n        return this.firstNameControl.touched && !this.firstNameControlInvalid;\r\n    }\r\n\r\n    get firstNameControlInvalid() {\r\n        return this.firstNameControl.touched && this.firstNameControl.hasError('required');\r\n    }\r\n\r\n    get lastNameControl() {\r\n        return this.registerForm.get('lastName') as FormControl;\r\n    }\r\n\r\n    get lastNameControlValid() {\r\n        return this.lastNameControl.touched && !this.lastNameControlInvalid;\r\n    }\r\n\r\n    get lastNameControlInvalid() {\r\n        return this.lastNameControl.touched && this.lastNameControl.hasError('required');\r\n    }\r\n\r\n    get emailControl() {\r\n        return this.registerForm.get('email') as FormControl;\r\n    }\r\n\r\n    get emailControlValid() {\r\n        return this.emailControl.touched && !this.emailControlInvalid;\r\n    }\r\n\r\n    get emailControlInvalid() {\r\n        return (\r\n            this.emailControl.touched &&\r\n            (this.emailControl.hasError('required') || this.emailControl.hasError('email'))\r\n        );\r\n    }\r\n\r\n    get passwordControl() {\r\n        return this.registerForm.get('password') as FormControl;\r\n    }\r\n\r\n    get passwordControlValid() {\r\n        return this.passwordControl.touched && !this.passwordControlInvalid;\r\n    }\r\n\r\n    get passwordControlInvalid() {\r\n        return (\r\n            this.passwordControl.touched &&\r\n            (this.passwordControl.hasError('required') ||\r\n                this.passwordControl.hasError('minlength'))\r\n        );\r\n    }\r\n\r\n    get confirmPasswordControl() {\r\n        return this.registerForm.get('confirmPassword') as FormControl;\r\n    }\r\n\r\n    get confirmPasswordControlValid() {\r\n        return this.confirmPasswordControl.touched && !this.confirmPasswordControlInvalid;\r\n    }\r\n\r\n    get confirmPasswordControlInvalid() {\r\n        return (\r\n            this.confirmPasswordControl.touched &&\r\n            (this.confirmPasswordControl.hasError('required') ||\r\n                this.confirmPasswordControl.hasError('minlength') ||\r\n                this.registerForm.hasError('passwordMismatch'))\r\n        );\r\n    }\r\n\r\n    get termsAndConditionsControl() {\r\n        return this.registerForm.get('termsAndConditions') as FormControl;\r\n    }\r\n\r\n    get termsAndConditionsControlValid() {\r\n        return this.termsAndConditionsControl.touched && !this.termsAndConditionsControlInvalid;\r\n    }\r\n\r\n    get termsAndConditionsControlInvalid() {\r\n        return (\r\n            this.termsAndConditionsControl.touched &&\r\n            this.termsAndConditionsControl.hasError('required')\r\n        );\r\n    }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvbW9kdWxlcy9hdXRoL2NvbnRhaW5lcnMvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LnNjc3MifQ== */\"","import { ChangeDetectionStrategy, Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthResponseData, AuthService } from '@modules/auth/services';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'sb-register',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    templateUrl: './register.component.html',\r\n    styleUrls: ['register.component.scss'],\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n    @ViewChild('confirmationModal') confirmationModal!: TemplateRef<unknown>;\r\n    @ViewChild('errorModal') errorModal!: TemplateRef<unknown>;\r\n    error = '';\r\n    registerForm = this.fb.group(\r\n        {\r\n            firstName: ['', [Validators.required]],\r\n            lastName: ['', [Validators.required]],\r\n            email: ['', [Validators.required, Validators.email]],\r\n            password: ['', [Validators.required, Validators.minLength(8)]],\r\n            confirmPassword: ['', [Validators.required]],\r\n        },\r\n        { validator: this._checkPasswords }\r\n    );\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private modalService: NgbModal,\r\n        private router: Router,\r\n        private authService: AuthService\r\n    ) {}\r\n    ngOnInit() {\r\n        this.authService.autoLogin();\r\n        console.log('sss');\r\n    }\r\n\r\n    onSubmit() {\r\n        const email = this.registerForm.value.email;\r\n        const password = this.registerForm.value.password;\r\n        let authObs: Observable<AuthResponseData>;\r\n\r\n        if (this.registerForm.status === 'VALID') {\r\n            authObs = this.authService.signup(email, password);\r\n            authObs.subscribe(\r\n                resData => {\r\n                    console.log(resData);\r\n                    this.modalService.open(this.confirmationModal).result.then(\r\n                        result => {\r\n                            if (result === 'TALENTS') {\r\n                                this.router.navigate(['/talents/list']);\r\n                            }\r\n                        },\r\n                        reason => {}\r\n                    );\r\n                },\r\n                errorMessage => {\r\n                    console.log(errorMessage);\r\n                    this.error = errorMessage;\r\n                }\r\n            );\r\n        } else {\r\n            this.modalService.open(this.errorModal).result.then(\r\n                result => {\r\n                    if (result === 'ERROR') {\r\n                        this.error = result;\r\n                        console.log(result);\r\n                        this.router.navigate(['/auth/register']);\r\n                    }\r\n                },\r\n                reason => {}\r\n            );\r\n        }\r\n        for (const key in this.registerForm.controls) {\r\n            const control = this.registerForm.controls[key];\r\n            control.markAllAsTouched();\r\n        }\r\n    }\r\n    _checkPasswords(group: FormGroup) {\r\n        const pass = group.controls.password.value;\r\n        const confirmPass = group.controls.confirmPassword.value;\r\n        return pass === confirmPass ? null : { passwordMismatch: true };\r\n    }\r\n    /* Accessor Methods */ get firstNameControl() {\r\n        return this.registerForm.get('firstName') as FormControl;\r\n    }\r\n    get firstNameControlValid() {\r\n        return this.firstNameControl.touched && !this.firstNameControlInvalid;\r\n    }\r\n    get firstNameControlInvalid() {\r\n        return this.firstNameControl.touched && this.firstNameControl.hasError('required');\r\n    }\r\n    get lastNameControl() {\r\n        return this.registerForm.get('lastName') as FormControl;\r\n    }\r\n    get lastNameControlValid() {\r\n        return this.lastNameControl.touched && !this.lastNameControlInvalid;\r\n    }\r\n    get lastNameControlInvalid() {\r\n        return this.lastNameControl.touched && this.lastNameControl.hasError('required');\r\n    }\r\n    get emailControl() {\r\n        return this.registerForm.get('email') as FormControl;\r\n    }\r\n    get emailControlValid() {\r\n        return this.emailControl.touched && !this.emailControlInvalid;\r\n    }\r\n    get emailControlInvalid() {\r\n        return (\r\n            this.emailControl.touched &&\r\n            (this.emailControl.hasError('required') || this.emailControl.hasError('email'))\r\n        );\r\n    }\r\n    get passwordControl() {\r\n        return this.registerForm.get('password') as FormControl;\r\n    }\r\n    get passwordControlValid() {\r\n        return this.passwordControl.touched && !this.passwordControlInvalid;\r\n    }\r\n    get passwordControlInvalid() {\r\n        return (\r\n            this.passwordControl.touched &&\r\n            (this.passwordControl.hasError('required') ||\r\n                this.passwordControl.hasError('minlength'))\r\n        );\r\n    }\r\n    get confirmPasswordControl() {\r\n        return this.registerForm.get('confirmPassword') as FormControl;\r\n    }\r\n    get confirmPasswordControlValid() {\r\n        return this.confirmPasswordControl.touched && !this.confirmPasswordControlInvalid;\r\n    }\r\n    get confirmPasswordControlInvalid() {\r\n        return (\r\n            this.confirmPasswordControl.touched &&\r\n            (this.confirmPasswordControl.hasError('required') ||\r\n                this.confirmPasswordControl.hasError('minlength') ||\r\n                this.registerForm.hasError('passwordMismatch'))\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n    canActivate(): Observable<boolean> {\r\n        return of(true);\r\n    }\r\n}\r\n\r\n\r\n/* import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { AuthService } from '../services';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n    constructor(private authService: AuthService) {}\r\n    canActivate(\r\n        route: ActivatedRouteSnapshot,\r\n        router: RouterStateSnapshot\r\n    ): boolean | Promise<boolean> | Observable<boolean> {\r\n        return this.authService.user.pipe(\r\n            map((user: any) => {\r\n                return !!user;\r\n            })\r\n        );\r\n    }\r\n}\r\n */\r\n","import { AuthGuard } from './auth.guard';\r\n\r\nexport const guards = [AuthGuard];\r\n\r\nexport * from './auth.guard';\r\n","// tslint:disable: prettier\r\nimport { HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpParams, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { exhaustMap, take } from 'rxjs/operators';\r\n\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptorService implements HttpInterceptor {\r\n    constructor(private authService: AuthService) {}\r\n\r\n    /* intercept(req: HttpRequest<any>, next: HttpHandler){\r\n\r\n        if(localStorage.getItem('access-token') != null) {\r\n            const token =  localStorage.getItem('access-token');\r\n            // const headers = new HttpHeaders().set('access-token', token);\r\n            const AuthRequest = req.clone({\r\n                params: new HttpParams().set('auth', token)\r\n            });\r\n            console.log(AuthRequest);\r\n            return next.handle(AuthRequest)\r\n        }else {\r\n            return next.handle(req);\r\n        }\r\n    } */\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n        return this.authService.user.pipe(\r\n          take(1),\r\n          exhaustMap(user => {\r\n            if (!user) {\r\n              return next.handle(req);\r\n            }\r\n            const userReq = req.clone({\r\n              params: new HttpParams().set('auth', user.token)\r\n            });\r\n            return next.handle(userReq);\r\n          })\r\n        );\r\n      }\r\n\r\n}\r\n\r\n\r\n\r\n        /* console.log('//////////////////////////interceptor');\r\n                /* localStorage.setItem('token', 'code');\r\n                console.log(localStorage.getItem('token'));\r\n        const bla = this.authService.user.subscribe(value => {\r\n            console.log(value);\r\n        });\r\n        return this.authService.user.pipe(\r\n            take(1),\r\n            exhaustMap(user => {\r\n                console.log(user);\r\n                if (!user) {\r\n                    return next.handle(req);\r\n                }else{\r\n                    // console.log(user.token);\r\n                    const userReq = req.clone({\r\n                        params: new HttpParams().set('auth', user.token)\r\n                    });\r\n                    console.log(userReq.params);\r\n                    return next.handle(userReq);\r\n                }\r\n\r\n            })\r\n        );\r\n    }} */\r\n\r\n"]}